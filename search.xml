<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>毕业季——大学路1号的时光</title>
      <link href="/2020/06/22/Graduation-season-Time-at-No.1-University-Road/"/>
      <url>/2020/06/22/Graduation-season-Time-at-No.1-University-Road/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://imgchr.com/i/UZ7S1g" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/07/08/UZ7S1g.jpg" alt="学校礼堂"></a></p><a id="more"></a><p>16年的夏天，拿到录取通知书<br>是这个故事的开始<br>20年的夏天，拿到毕业证学位证<br>故事已经步入尾声</p><p>回想我的求学生涯，没有早恋，没有逃课，没有不良习惯，也没有特别耀眼的成绩，有的只是一个平平淡淡的青春！二十多岁的年纪，连一场值得回忆的恋爱都没有！</p><p>可能不是平凡，而是平庸！</p><p>大学生涯是有遗憾的，但不管怎样，以后我依然会很怀念。<br>或许，对于毕业，每个人都有更多话想要说，但是，我们都懂，离开只为未来更好地遇见。</p><p>最后，愿我们前程似锦，各自珍重！！！</p><p>欲买桂花同载酒，终不似，少年游！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莞尔日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗香如故</title>
      <link href="/2020/06/12/Dark-incense/"/>
      <url>/2020/06/12/Dark-incense/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-WvERHXRE" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="28151052" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div><p><img src="https://s1.ax1x.com/2020/07/14/Ut2wi4.jpg" alt="雏菊"></p><p>学生时代遇见的喜欢的人，大概以后会一直记得吧！！！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莞尔日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>要毕业了</title>
      <link href="/2020/05/30/School-celebration/"/>
      <url>/2020/05/30/School-celebration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>母校111周年校庆：<a href="https://720yun.com/t/e6vkswd9dph?scene_id=47223555" target="_blank" rel="noopener">https://720yun.com/t/e6vkswd9dph?scene_id=47223555</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莞尔日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++二维数组参数传递</title>
      <link href="/2020/05/01/C-or-C++_two-dimensional-array-parameter-transfer/"/>
      <url>/2020/05/01/C-or-C++_two-dimensional-array-parameter-transfer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="C-C-语言中二维数组参数传递常用三种方法："><a href="#C-C-语言中二维数组参数传递常用三种方法：" class="headerlink" title="C/C++语言中二维数组参数传递常用三种方法："></a>C/C++语言中二维数组参数传递常用三种方法：</h3><ul><li><p>方法一：形参为二维数组并给出第二维的大小</p><p>如：<code>void sum(int a[][3])</code></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">3</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">s += a[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line">sum(b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二：形参为指向数组的指针并给出数组的长度</p><p>如：<code>void sum(int (*a)[3])</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span>(*a)[<span class="number">3</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">s += a[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三：形参为指针的指针且实参必须为指针，而不能是数组名</p><p>如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> **a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">s += a[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line">a[<span class="number">0</span>] = b[<span class="number">0</span>];</span><br><span class="line">a[<span class="number">1</span>] = b[<span class="number">1</span>];</span><br><span class="line">sum(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车辆轨迹追踪系统开发文档</title>
      <link href="/2020/04/29/Development-document-of-vehicle-trajectory-tracking-system/"/>
      <url>/2020/04/29/Development-document-of-vehicle-trajectory-tracking-system/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>车辆大规模GPS数据采集预处理系统</p><p>终端管理API接口：</p><table><thead><tr><th>模块</th><th>接口名称</th><th>功能说明</th></tr></thead><tbody><tr><td>entity</td><td>add</td><td>创建entity</td></tr><tr><td></td><td>update</td><td>更新entity</td></tr><tr><td></td><td>delete</td><td>删除entity</td></tr><tr><td></td><td>list</td><td>检索符合过滤条件的entity，返回entity属性信息和最新位置，可用于列出entity，也可用于批量查询多个entity的位置。</td></tr></tbody></table><p>API接口总览：<a href="http://lbsyun.baidu.com/index.php?title=yingyan/api/v3/entity" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=yingyan/api/v3/entity</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用——括号匹配</title>
      <link href="/2020/03/27/Stack-application-bracket-matching/"/>
      <url>/2020/03/27/Stack-application-bracket-matching/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目描述：编写程序，判定给定表达式中的括号是否匹配，表达式中的合法括号位 “(”，“)”，“[”，“]”，“{”，“}”，括号可按任意次序嵌套使用。</p><p>输入说明：有多个表达式，出入数据第一行是表达式的数目，每个表达式占一行。</p><p>输出说明：对每个表达式，若其括号匹配则输出“Yes”，否则输出“No”。</p><a id="more"></a><p>C++实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ch[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'('</span> || ch[i] == <span class="string">'['</span> || ch[i] == <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(ch[i]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">')'</span>&amp;&amp;s.top() == <span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">']'</span>&amp;&amp;s.top() == <span class="string">'['</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'&#125;'</span>&amp;&amp;s.top() == <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">')'</span>&amp;&amp;s.top() != <span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">']'</span>&amp;&amp;s.top() != <span class="string">'['</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'&#125;'</span>&amp;&amp;s.top() != <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">')'</span> || ch[i] == <span class="string">']'</span> || ch[i] == <span class="string">'&#125;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/<em>—-测试用例—-</em>/<br>/*<br>[(d+f)*{}]<br>[(2+3)]<br>()}<br>[4(6]7)9<br>*/</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 栈 </tag>
            
            <tag> 括号匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列的定义与使用</title>
      <link href="/2020/03/26/Definition-and-use-of-stacks-and-queues/"/>
      <url>/2020/03/26/Definition-and-use-of-stacks-and-queues/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>栈（Stack）：只允许在一端进行插入或删除操作的线性表。</p><p>队列（Queue）：只允许在表的一端进行插入，而在表的另一端进行删除的线性表。</p><p>栈的基本操作：</p><p><code>s.empty()               若栈为空返回true，否则返回false</code><br><code>s.size()                   返回栈中元素的个数</code><br><code>s.pop()                   弹出栈顶元素但不返回其值</code><br><code>s.top()                    若栈s非空，返回栈顶的元素</code><br><code>s.push()                 在栈顶压入新元素</code></p><a id="more"></a><p>队列的基本操作：</p><p><code>q.empty()               若队列为空返回true，否则返回false</code><br><code>q.size()                   返回队列中元素的个数</code><br><code>q.pop()                    弹出队列首元素但不返回其值</code><br><code>q.front()                   返回队首元素的值，但不删除该元素</code><br><code>q.push()                  在队尾压入新元素</code><br><code>q.back()                  返回队列尾元素的值，但不删除该元素</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入头文件：</p><p><code>#include&lt;stack&gt;</code></p><p><code>#include&lt;queue&gt;</code></p><p>定义栈：<code>stack&lt;int&gt; s;</code></p><p>定义队列：<code>queue&lt;int&gt; q;</code></p><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;<span class="comment">//定义一个栈  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">s.push(i);</span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"栈内的元素的个数为："</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/tham_/article/details/44733101" target="_blank" rel="noopener">更多参考</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树构建与遍历——前序和中序或中序和后序确定二叉树</title>
      <link href="/2020/03/25/Bitree-construction-and-traversal/"/>
      <url>/2020/03/25/Bitree-construction-and-traversal/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="二叉树测试用例："><a href="#二叉树测试用例：" class="headerlink" title="二叉树测试用例："></a>二叉树测试用例：</h3><p><img src="https://s1.ax1x.com/2020/04/04/GdqXuD.png" alt="二叉树"></p><p>preOrder: ABDGCEFH<br>inOrder: DGBAECHF<br>postOrder: GDBEHFCA</p><ol><li>已知二叉树前序遍历序列和中序遍历序列可以确定一颗二叉树。</li><li>已知二叉树中序遍历序列和后序遍历序列可以确定一颗二叉树。</li><li><u>已知二叉树前序遍历序列和后序遍历序列不能确定一颗二叉树。</u></li></ol><h3 id="已知二叉树前序和中序遍历序列，构造二叉树，C-实现："><a href="#已知二叉树前序和中序遍历序列，构造二叉树，C-实现：" class="headerlink" title="已知二叉树前序和中序遍历序列，构造二叉树，C++实现："></a>已知二叉树前序和中序遍历序列，构造二叉树，C++实现：</h3><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树结点定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> value;</span><br><span class="line">node *lchild;</span><br><span class="line">node *rchild;</span><br><span class="line">node(<span class="keyword">char</span> ch) &#123;</span><br><span class="line">value = ch;</span><br><span class="line">lchild = <span class="literal">NULL</span>;</span><br><span class="line">rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 二叉树前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;value;</span><br><span class="line">preOrder(root-&gt;lchild);</span><br><span class="line">preOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 二叉树中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line">inOrder(root-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;value;</span><br><span class="line">inOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 二叉树后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line">postOrder(root-&gt;lchild);</span><br><span class="line">postOrder(root-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">buildBitree</span><span class="params">(<span class="built_in">string</span> pre, <span class="built_in">string</span> in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = pre.length();</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">node *root = <span class="keyword">new</span> node(pre[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> n = in.<span class="built_in">find</span>(pre[<span class="number">0</span>]);</span><br><span class="line">root-&gt;lchild = buildBitree(pre.substr(<span class="number">1</span>, n), in.substr(<span class="number">0</span>, n));</span><br><span class="line">root-&gt;rchild = buildBitree(pre.substr(n + <span class="number">1</span>, len - n - <span class="number">1</span>), in.substr(n + <span class="number">1</span>, len - n - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> pre[<span class="number">100</span>], in[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; pre &gt;&gt; in)</span><br><span class="line">&#123;</span><br><span class="line">node *root = buildBitree(pre, in);</span><br><span class="line">postOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//inOrder(root);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//preOrder(root);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="已知二叉树中序和后序遍历序列，构造二叉树，C-实现："><a href="#已知二叉树中序和后序遍历序列，构造二叉树，C-实现：" class="headerlink" title="已知二叉树中序和后序遍历序列，构造二叉树，C++实现："></a>已知二叉树中序和后序遍历序列，构造二叉树，C++实现：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node *<span class="title">buildBitree</span><span class="params">(<span class="built_in">string</span> post, <span class="built_in">string</span> in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = post.length();</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">node *root = <span class="keyword">new</span> node(post[len - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> n = in.<span class="built_in">find</span>(post[len - <span class="number">1</span>]);</span><br><span class="line">root-&gt;lchild = buildBitree(post.substr(<span class="number">0</span>, n), in.substr(<span class="number">0</span>, n));</span><br><span class="line">root-&gt;rchild = buildBitree(post.substr(n, len - n - <span class="number">1</span>), in.substr(n + <span class="number">1</span>, len - n - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Notes:</strong> </p><p>&emsp;&emsp;str.length()、str.size()均用来求取字符串的长度。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心情日记</title>
      <link href="/2020/03/25/The-movie-is-recommended/"/>
      <url>/2020/03/25/The-movie-is-recommended/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>想看的电影：等待黎明</p><p>《当幸福来敲门》</p><p><img src="https://s1.ax1x.com/2020/05/30/tQ7mRK.jpg" alt="当幸福来敲门"></p><p><strong>2020/07/14</strong></p><h3 id="纯音乐歌单"><a href="#纯音乐歌单" class="headerlink" title="纯音乐歌单"></a><center>纯音乐歌单</center></h3>    <div id="aplayer-NYlHAEkq" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2441277361" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"    ></div>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影音 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校航拍</title>
      <link href="/2020/03/21/Cumt-aerial/"/>
      <url>/2020/03/21/Cumt-aerial/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>声明：视频资源来自网络，因为喜欢，所以上传到博客，如有侵权，请联系删除！</strong></p><script src='//player.polyv.net/script/polyvplayer.min.js'></script><div id='plv_8bb758cd63a75137b984b867c33dce10_8'></div><script>var player = polyvObject('#plv_8bb758cd63a75137b984b867c33dce10_8').videoPlayer({    'width':'900',  'height':'506',    'vid' : '8bb758cd63a75137b984b867c33dce10_8' , 'forceH5':true });</script>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金城兰州</title>
      <link href="/2020/03/20/Jincheng-lanzhou/"/>
      <url>/2020/03/20/Jincheng-lanzhou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>声明：视频资源来自网络，因为喜欢，所以上传到博客，如有侵权，请联系删除！</strong></p><script src='//player.polyv.net/script/polyvplayer.min.js'></script><div id='plv_8bb758cd63e385239d8290fedb7e5dd7_8'></div><script>var player = polyvObject('#plv_8bb758cd63e385239d8290fedb7e5dd7_8').videoPlayer({    'width':'900',  'height':'506',    'vid' : '8bb758cd63e385239d8290fedb7e5dd7_8' , 'forceH5':true });</script>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++十进制与二进制的互相转换</title>
      <link href="/2020/02/10/C++_decimal-and-binary-conversion/"/>
      <url>/2020/02/10/C++_decimal-and-binary-conversion/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>手动实现进制转换</p><p>十进制转换为二进制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decTobin</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,w=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">h = n % <span class="number">2</span>;</span><br><span class="line">sum += h * w;</span><br><span class="line">w *= <span class="number">10</span>;</span><br><span class="line">n = n / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>二进制转换为十进制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTodec</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,w=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">h = n % <span class="number">10</span>;</span><br><span class="line">sum += h * w;</span><br><span class="line">w *= <span class="number">2</span>;</span><br><span class="line">n = n / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++动态数组</title>
      <link href="/2020/01/10/C-or-C++_dynamic-array/"/>
      <url>/2020/01/10/C-or-C++_dynamic-array/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>近来刷题，遇到好几道题目需要动态数组解决，现在整理一下。C++中动态开辟一维、二维数组很常见，也很实用。</p><ol><li><h5 id="动态开辟一维数组"><a href="#动态开辟一维数组" class="headerlink" title="动态开辟一维数组"></a>动态开辟一维数组</h5><p>动态开辟一维数组简单，代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DynamicCreate1Array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;len;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] p;         <span class="comment">//动态数组使用完一定要释放</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><h5 id="动态开辟二维数组"><a href="#动态开辟二维数组" class="headerlink" title="动态开辟二维数组"></a>动态开辟二维数组</h5><ul><li><p>已知二维数组列数，未知行数。假设建立一个n行4列的动态数组（列已知）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DynamicCreate2Array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span>(*p)[<span class="number">4</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] p;         <span class="comment">//动态数组使用完一定要释放</span></span><br></pre></td></tr></table></figure></li><li><p>二维数组行数、列数均未知</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DynamicCreate2Array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row, column;</span><br><span class="line"><span class="keyword">char</span> **p = <span class="keyword">new</span> <span class="keyword">char</span>*[row];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = <span class="keyword">new</span> <span class="keyword">char</span>[column];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态数组释放</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br></pre></td></tr></table></figure><p>例：机器人走迷宫</p><p>迷宫由N W S E组成，踩到N向上走一格，踩到W向左走一格，踩到S向下走一格，踩到E向右走一格。</p><p>输入迷宫行数、列数、机器人开始的初试列数（不大于10，列数从1开始数），判断能否走出迷宫。能走出输出步数，不能走出输出”NO”，多组输入，遇 0 0 0 结束输入。</p><p>例：</p><p>输入：</p><p>4 5 6</p><p>NNNNSN</p><p>NNNSWN</p><p>NNSWNN</p><p>NSWNNN</p><p>3 6 2</p><p>NSNNNN</p><p>NSWNNN</p><p>NENNNN</p><p>0 0 0</p><p>输出：</p><p>7</p><p>No</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*----机器人走迷宫----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> row, column, <span class="built_in">begin</span>, <span class="built_in">step</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; row &gt;&gt; column &gt;&gt; <span class="built_in">begin</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row == <span class="number">0</span> &amp;&amp; column == <span class="number">0</span> &amp;&amp; <span class="built_in">begin</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> **p = <span class="keyword">new</span> <span class="keyword">char</span>*[row];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = <span class="keyword">new</span> <span class="keyword">char</span>[column];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">begin</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; row &amp;&amp; i &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j &lt; column &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p[i][j] == <span class="string">'N'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p[i][j] == <span class="string">'S'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p[i][j] == <span class="string">'W'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line">j--;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p[i][j] == <span class="string">'E'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line">j++;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">step</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">step</span> == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">step</span> != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">step</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">```</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 动态数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux socket通信编程</title>
      <link href="/2019/07/01/Linux-socket-communication-programming/"/>
      <url>/2019/07/01/Linux-socket-communication-programming/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>示例：用C语言，基于linux提供的socket函数，编写一个实现“从客户端输入十个字符串，在服务器端完成字符数和单词数统计，并按首位字母排序”的远程计算的网络服务程序。 </p><a id="more"></a><h3 id="1、UDP编程说明"><a href="#1、UDP编程说明" class="headerlink" title="1、UDP编程说明"></a>1、UDP编程说明</h3><p>UDP协议的服务器端流程：</p><p>(1)建立套接字文件描述符，使用函数socket()，生成套接字文件描述符。</p><p>(2)设置服务器地址和侦听端口，初始化要绑定的网络地址结构。</p><p>(3)绑定侦听端口，使用bind()函数，将套接字文件描述符和一个地址类型变量进行绑定。</p><p>(4)接收客户端的数据，使用recvfrom()函数接收客户端的网络数据。</p><p>(5)向客户端发送数据，使用sendto()函数向服务器主机发送数据。</p><p>(6)关闭套接字，使用close()函数释放资源。UDP协议的客户端流程</p><p>UDP协议的客户端流程：</p><p>(1)建立套接字文件描述符，socket()；</p><p>(2)设置服务器地址和端口，struct sockaddr；</p><p>(3)向服务器发送数据，sendto()；</p><p>(4)接收服务器的数据，recvfrom()；</p><p>(5)关闭套接字，close()。</p><p><img src="https://i.loli.net/2019/12/31/kU7i4GObXKWndrw.png" alt="UDP编程流程"></p><h3 id="2、相关函数"><a href="#2、相关函数" class="headerlink" title="2、相关函数"></a>2、相关函数</h3><p>(1)  int socket(AF_INET, SOCK_DGRAM, 0);</p><p>创建udp socket，返回套接字描述符，UDP协议建立套接字的方式同TCP方式一样，使用socket()函数，只不过协议的类型使用SOCK_DGRAM，而不是SOCK_STREAM。</p><p>(2) int sendto(int sockfd, const void *data, int data_len, unsigned int flags, struct sockaddr *remaddr,sock_lenremaddr_len)</p><p>功能：基于UDP发送数据报，返回实际发送的数据长度，出错时返回－1</p><p>参数说明：</p><p>sockfd:套接字描述符</p><p>data:指向要发送数据的指针</p><p>data_len:数据长度</p><p>flags:通常为0</p><p>remaddr:远端地址：IP地址和端口号</p><p>remaddr_len:地址长度</p><p>(3) int recvfrom(int sockfd, void *buf,int buf_len,unsigned int flags,struct sockaddr *from,sock_len *fromlen);</p><p>功能：从UDP接收数据，返回实际接收的字节数，失败时返回－1</p><p>参数说明：</p><p>Sockfd:套接字描述符</p><p>buf:指向内存块的指针</p><p>buf_len:内存块大小，以字节为单位</p><p>flags:一般为0</p><p>from:远端的地址，IP地址和端口号</p><p>fromlen:远端地址长度</p><h3 id="3、程序编写"><a href="#3、程序编写" class="headerlink" title="3、程序编写"></a>3、程序编写</h3><p>(1) 用C语言编写客户端程序，创建一个socket通信，从客户端输入十个字符串。</p><p>(2) 编译客户端程序生成可执行文件</p><p>输入命令：gcc client1.c -o client1</p><p>​              ./client1</p><p><img src="https://i.loli.net/2019/12/31/nDbKUhktrEle2AM.png" alt="编译客户端程序"></p><p>(3) 用C语言编写服务器端程序，绑定客户端通信，接收从客户端输入的十个字符串，显示在屏幕上，并统计输入的字符串中总的单词数和字符数，并按首位字母的ASCII码值从高到低进行排列，输出显示到屏幕。</p><p>(4) 编译服务器端程序生成可执行文件</p><p>输入命令：gcc server1.c -o server1</p><p>​              ./server1</p><p><img src="https://i.loli.net/2019/12/31/P57M3ksLFhqHdyK.png" alt="编译服务器端程序"></p><h3 id="4、程序运行效果"><a href="#4、程序运行效果" class="headerlink" title="4、程序运行效果"></a>4、程序运行效果</h3><p>(1) 客户端输入十个字符串。</p><p>注：输入10个字符串时每行代表1个字符串，10字符串10行，由于字符串的输入是由 fgets() 函数实现的，所以获取字符串的时候会将空格符和换行符也进行保存，这点在后面进行总字符数的统计时也体现了出来，获取的字符串由结构体sendbuf[10]进行存储。</p><p><img src="https://i.loli.net/2019/12/31/HqKkpUYsr7o6OVA.png" alt="客户端运行效果"></p><p>(2) 服务器端接收数据，显示在屏幕上，并统计输入的字符串中总的单词数和字符数，并按首位字母的ASCII码值从高到低进行排列，输出显示到屏幕。</p><p>注：统计总单词数相当于统计总空格数，空格数+1即为总单词数，字符数的统计结果包括了每个字符串的空格和换行符，每个字符串都有一个换行符，如图9，可以看到得到的总字符数85中包含了所有的空格符和换行符。利用冒泡排序，直接比较输入的10个字符串的首字母，实现字符串按首字母ASCII码值从大到小排列。</p><p><img src="https://i.loli.net/2019/12/31/ezErBTlbW7FoQSx.png" alt="服务器端运行效果"></p><h3 id="5、字符串排序说明"><a href="#5、字符串排序说明" class="headerlink" title="5、字符串排序说明"></a>5、字符串排序说明</h3><p>(1) 实现将10个字符串按首字母的ASCII码值从高到低进行排列并依次输出显示在屏幕上。</p><p>功能实现：输入的10个字符串设置结构体sendbuf[10]保存，再服务器端设置结构体recvbuf[10]接收数据，利用冒泡排序，先将每个字符串的首字母取出来，将其值赋给服务端接收缓冲区结构体的recvbuf[i].init成员（专门用于存储字符串的首字母），再直接比较recvbuf[i].init成员值的ASCII码值大小，实现从高到底排列并输出到屏幕上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="keyword">int</span> k = n;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="keyword">int</span> m = n + <span class="number">1</span>; m &lt; <span class="number">10</span>; m++)</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="keyword">if</span> (recvbuf[k].init &lt; recvbuf[m].init)</span><br><span class="line">​                k = m;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">if</span> (k != n)</span><br><span class="line">​        &#123;</span><br><span class="line">​            temp = recvbuf[n];</span><br><span class="line">​            recvbuf[n] = recvbuf[k];</span><br><span class="line">​            recvbuf[k] = temp;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"字符串按首字母ASCII码值从大到小排列为：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="built_in">printf</span>(<span class="string">"%s"</span>, recvbuf[n].string_client);</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、完整客户端、服务器端程序代码"><a href="#6、完整客户端、服务器端程序代码" class="headerlink" title="6、完整客户端、服务器端程序代码"></a>6、完整客户端、服务器端程序代码</h3><p>客户端程序源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> MYPORT 8886</span></span><br><span class="line"><span class="keyword">char</span>* SERVERIP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> ERR_EXIT(m) \</span></span><br><span class="line">​    <span class="keyword">do</span> \</span><br><span class="line">&#123; \</span><br><span class="line">​    perror(m); \</span><br><span class="line">​    <span class="built_in">exit</span>(EXIT_FAILURE); \</span><br><span class="line">​    &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo_cli</span><span class="params">(<span class="keyword">int</span> sock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">​    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">​    servaddr.sin_family = AF_INET;</span><br><span class="line">​    servaddr.sin_port = htons(MYPORT);</span><br><span class="line">​    servaddr.sin_addr.s_addr = inet_addr(SERVERIP);</span><br><span class="line">​    <span class="keyword">int</span> ret;</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">client</span></span></span><br><span class="line"><span class="class">​    &#123;</span></span><br><span class="line">​        <span class="keyword">char</span> string_client[<span class="number">100</span>];</span><br><span class="line">​    &#125;sendbuf[<span class="number">10</span>];</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">server</span></span></span><br><span class="line"><span class="class">​    &#123;</span></span><br><span class="line">​        <span class="keyword">char</span> string_client[<span class="number">100</span>];</span><br><span class="line">​    &#125;recvbuf[<span class="number">10</span>];</span><br><span class="line">​    <span class="comment">//struct client temp;</span></span><br><span class="line">​    <span class="comment">//struct server temp;</span></span><br><span class="line">​    <span class="keyword">int</span> i;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"请输入10字符串：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        fgets(sendbuf[i].string_client,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"向服务器发送：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="built_in">printf</span>(<span class="string">"%s"</span>, sendbuf[i].string_client);</span><br><span class="line">​        sendto(sock, sendbuf[i].string_client, <span class="built_in">strlen</span>(sendbuf[i].string_client), <span class="number">0</span>, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">​        <span class="built_in">memset</span>(sendbuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(sendbuf[i].string_client));</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">close</span>(sock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">int</span> sock;</span><br><span class="line">​    <span class="keyword">if</span> ((sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">​        ERR_EXIT(<span class="string">"socket"</span>);</span><br><span class="line">​    echo_cli(sock);</span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端程序源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> MYPORT 8886</span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> ERR_EXIT(m) \</span></span><br><span class="line">​    <span class="keyword">do</span> &#123; \</span><br><span class="line">​    perror(m); \</span><br><span class="line">​    <span class="built_in">exit</span>(EXIT_FAILURE); \</span><br><span class="line">​    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo_ser</span><span class="params">(<span class="keyword">int</span> sock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="comment">//char recvbuf[1024] = &#123;0&#125;;</span></span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">server</span></span></span><br><span class="line"><span class="class">​    &#123;</span></span><br><span class="line">​        <span class="keyword">char</span> string_client[<span class="number">100</span>];</span><br><span class="line">​        <span class="keyword">char</span> init;</span><br><span class="line">​    &#125;recvbuf[<span class="number">10</span>];</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">server</span> <span class="title">temp</span>;</span></span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">peeraddr</span>;</span></span><br><span class="line">​    <span class="keyword">socklen_t</span> peerlen;</span><br><span class="line">​    <span class="keyword">int</span> n;</span><br><span class="line">​    <span class="keyword">int</span> i, nword=<span class="number">0</span>, nchar=<span class="number">0</span>;</span><br><span class="line">​    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">​    &#123;       </span><br><span class="line">​        peerlen = <span class="keyword">sizeof</span>(peeraddr);</span><br><span class="line">​        <span class="built_in">memset</span>(recvbuf[i].string_client, <span class="number">0</span>, <span class="keyword">sizeof</span>(recvbuf[i].string_client));</span><br><span class="line">​        n = recvfrom(sock, recvbuf[i].string_client, <span class="keyword">sizeof</span>(recvbuf[i].string_client), <span class="number">0</span>,</span><br><span class="line">​                     (struct sockaddr *)&amp;peeraddr, &amp;peerlen);</span><br><span class="line">​        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">​        &#123;            </span><br><span class="line">​            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">​                <span class="keyword">continue</span>;          </span><br><span class="line">​            ERR_EXIT(<span class="string">"recvfrom error"</span>);</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"接收到的数据：%s"</span>,recvbuf[i].string_client);</span><br><span class="line">​            <span class="comment">//printf("%s",recvbuf[i].string_client);</span></span><br><span class="line">​            <span class="comment">//sendto(sock, recvbuf, n, 0,</span></span><br><span class="line">​            <span class="comment">//       (struct sockaddr *)&amp;peeraddr, peerlen);</span></span><br><span class="line">​            <span class="comment">//printf("回送的数据：%s\n",recvbuf[i].string_client);</span></span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">int</span> numWhiteSpace = <span class="number">0</span>;</span><br><span class="line">​    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">​        <span class="built_in">strcpy</span>(str, recvbuf[n].string_client);</span><br><span class="line">​        <span class="comment">//printf("字符串：%s\n", str);</span></span><br><span class="line">​        recvbuf[n].init = str[<span class="number">0</span>];</span><br><span class="line">​        <span class="keyword">while</span> (<span class="string">'\0'</span> != str[j])</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="keyword">if</span> (<span class="string">' '</span> == str[j])&#123;</span><br><span class="line">​                ++numWhiteSpace;   <span class="comment">//空格数</span></span><br><span class="line">​            &#125;</span><br><span class="line">​            ++j; <span class="comment">//字符数</span></span><br><span class="line">​        &#125;</span><br><span class="line">​        nchar = j + nchar;</span><br><span class="line">​        nword = numWhiteSpace + <span class="number">1</span>+nword;</span><br><span class="line">​        j = <span class="number">0</span>;</span><br><span class="line">​        numWhiteSpace = <span class="number">0</span>;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"输入字符串的总单词数：%d\n"</span>, nword);</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"输入字符串的总字符数（包括空格、换行符）：%d\n"</span>, nchar); </span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="keyword">int</span> k = n;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="keyword">int</span> m = n + <span class="number">1</span>; m &lt; <span class="number">10</span>; m++)</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="keyword">if</span> (recvbuf[k].init &lt; recvbuf[m].init)</span><br><span class="line">​                k = m;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">if</span> (k != n)</span><br><span class="line">​        &#123;</span><br><span class="line">​            temp = recvbuf[n];</span><br><span class="line">​            recvbuf[n] = recvbuf[k];</span><br><span class="line">​            recvbuf[k] = temp;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"字符串按首字母ASCII码值从大到小排列为：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="built_in">printf</span>(<span class="string">"%s"</span>, recvbuf[n].string_client);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">close</span>(sock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">int</span> sock;</span><br><span class="line">​    <span class="keyword">if</span> ((sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">​        ERR_EXIT(<span class="string">"socket error"</span>);</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">​    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">​    servaddr.sin_family = AF_INET;</span><br><span class="line">​    servaddr.sin_port = htons(MYPORT);</span><br><span class="line">​    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);  </span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"监听%d端口\n"</span>,MYPORT);</span><br><span class="line">​    <span class="keyword">if</span> (bind(sock, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">​        ERR_EXIT(<span class="string">"bind error"</span>);   </span><br><span class="line">​    echo_ser(sock);  </span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> socket通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器基础知识与配置</title>
      <link href="/2019/06/10/Server-basics-and-configuration/"/>
      <url>/2019/06/10/Server-basics-and-configuration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1、什么是守护进程？守护进程的类型和作用有哪些？</p><p>Linux 服务器在启动时需要启动很多系统服务，它们向本地和网络用户提供了Linux的系统功能接口，直接面向应用程序和用户。提供这些服务的程序是由运行在后台的守护进程来执行的。守护进程是生存期长的一种进程。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。他们常常在系统引导装入时启动，在系统关闭时终止。linux系统有很多守护进程，大多数服务器都是用守护进程实现的。同时，守护进程完成许多系统任务，比如，作业规划进程crond、打印进程lqd等。</p><a id="more"></a><p>根据守护进程的启动和管理方式，可以分为独立启动守护进程和超级守护进程两类：</p><p>独立启动（stand_alone):该类进程启动后就常驻内存，所以会一直占用系统资源。其最大的优点就是它会一直启动，当外界有要求时相应速度较快，像httpd等进程。</p><p>超级守护进程：系统启动时由一个统一的守护进程xinet来负责管理一些进程，当相应请求到来时需要通过xinet的转接才可以唤醒被xinet管理的进 程。这种进程的优点时最初只有xinet这一守护进程占有系统资源，其他的内部服务并不一直占有系统资源，只有数据包到来时才会被xinet管理员来唤醒。并且我们还可以通过xinet来对它所管理的进程设置一些访问权限，相当于多了一层管理机制。</p><p>2.linux的init进程是怎样的进程？细说init和linux上的各服务进程之间的关系？</p><p>init是Linux系统操作中不可缺少的程序之一。所谓的init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。</p><p>所以,init始终是第一个进程（其进程编号始终为1）。内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p><p>init进程由0进程创建，完成系统的初始化，是系统中所有其他用户进程的祖先进程。</p><p>3.Apache服务器的配置文件httpd.conf中有很多内容，请解释如下配置项：</p><p>（1）MaxKeepAliveRequests 200 </p><p>允许每次连接的最大请求数目，此为200。</p><p>（2）UserDir public_html</p><p>设定用户放置网页的目录。</p><p>（3）DefaultType text/plain </p><p>设置服务器对于不认识的文件类型的预设格式。</p><p>（4）AddLanguare en.en</p><p>设置可传送语言的文件给浏览器。</p><p>（5）DocumentRoot“/usr/local/httpd/htdocs”</p><p>该目录为Apache放置网页的地方。</p><p>（6）AddType application/x-httpd-php.php.php.php4</p><p>服务器选择使用php4。</p><p>（7）port 1080 </p><p>将apache服务器的端口号设定为1080。</p><p>（8）UserDir userdoc</p><p>设定用户网页目录为userdoc。</p><p>（9）DocumentRoot “/home/htdocs”</p><p>设定apache服务器的网页根目录:/home/htdocs。</p><p>（10）Options Indexes FollowSymLinks   AllowOverride None </p><p>Order deny,allow     deny from all     allow from 192.168.1.5</p><p>在此apache服务器上设定一个目录/home/htdocs/inside，且此目录只允许IP地址为192.168.1.5的主机访问。</p><p>（11）Server Type Standlone</p><p>定义apache服务器以独立进程的方式运行。</p><p>4.什么是Apache的虚拟主机？其作用是什么？Apache虚拟主机实现方法有哪些？</p><p>Apache是开源的web服务软件之一，也是现在开源系统比如centos上安装web服务常见软件；虚拟主机是提供网站服务的集成环境，比如：linux Apache+php+mysq、LAMP。就是常说的建站开通的虚拟空间，所以Apache服务器只是虚拟空间的一种架构。在一个Apache服务器上可以配置多个虚拟主机，实现一个服务器提供多站点服务，其实就是访问同一个服务器上的不同目录。</p><p>Apache虚拟主机的配置方式主要有三种，即基于IP、基于port、以及基于域名。</p><p>5.简述使用ftp进行文件传输时的两种登录方式？它们的区别是什么？常用的ftp文件传输命令有哪些？</p><p>ftp有两种登录方式：匿名登录和授权登录。使用匿名登录时，用户名为：anonymous，密码为：任何合法email地址；使用授权登录时，用户名为用户在远程系统中的用户帐号，密码为用户在远程系统中的用户密码。</p><p>区别：使用匿名登录只能访问ftp目录下的资源，默认配置下只能下载；而授权登录访问的权限大于匿名登录，且上载、下载均可。</p><p>ftp文件传输有两种文件传输模式：ASCII模式和二进制数据模式。ASCII模式用来传输文本文件，其他文件的传输使用binary模式。</p><p>常用的ftp文件传输命令为：bin、asc、put、get、mput、mget、prompt、bye。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 编程实例</title>
      <link href="/2019/06/03/Linux-programming-examples/"/>
      <url>/2019/06/03/Linux-programming-examples/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>示例：用C语言编写一个从键盘输入10名学生的姓名、性别、学号和家庭住址，然后按照学号排序，并将排序后的结果在屏幕上按对齐的方式打印输出的程序。</p><a id="more"></a><p>C语言排序程序源码 (学号按从高到低排序)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入10名学生的姓名，性别，学号，家庭住址；</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> sex[<span class="number">4</span>];  </span><br><span class="line"></span><br><span class="line">​    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> address[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">&#125;info[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">int</span> i,j, k;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"请输入10个学生的信息:姓名、性别、学号、家庭住址\n"</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="comment">//printf("请输入第%d位学生的信息:姓名、性别、学号、家庭住址\n", i + 1);</span></span><br><span class="line"></span><br><span class="line">​       <span class="built_in">scanf</span>(<span class="string">"%s%s%d%s"</span>, info[i].name, &amp;info[i].sex, &amp;info[i].id, &amp;info[i].address);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       k = i;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line"></span><br><span class="line">​       &#123;</span><br><span class="line"></span><br><span class="line">​              <span class="keyword">if</span> (info[k].id &lt; info[j].id)</span><br><span class="line"></span><br><span class="line">​                     k = j;</span><br><span class="line"></span><br><span class="line">​       &#125;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">if</span> (k != i)</span><br><span class="line"></span><br><span class="line">​       &#123;</span><br><span class="line"></span><br><span class="line">​              temp = info[i];</span><br><span class="line"></span><br><span class="line">​              info[i] = info[k];</span><br><span class="line"></span><br><span class="line">​              info[k] = temp;</span><br><span class="line"></span><br><span class="line">​       &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"10个学生的信息按序号由高到低排序为\n"</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="built_in">printf</span>(<span class="string">"%s\t%s\t%d\t%s\n"</span>, info[i].name, info[i].sex, info[i].id, info[i].address);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象语言的缺点和问题</title>
      <link href="/2019/01/01/Disadvantages-and-problems-of-object-oriented-languages/"/>
      <url>/2019/01/01/Disadvantages-and-problems-of-object-oriented-languages/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>面向对象编程是一种计算机编程架构。面向对象编程的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。面向对象编程达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p><a id="more"></a><p>刚开始学习C++ 时，我们首先了解到的就是面向对象语言的四个基本特征：抽象、继承、封装、多态、以及一大堆面向对象语言的优点包括代码重用，权限控制，易扩展，开发效率高之类的。毫无疑问面向对象编程的出现使人们的编程与实际的世界更加接近，所有的对象被赋予属性和方法，结果编程就更加富有人性化，但同时面向对象语言从诞生之日起就一直伴随着许多的缺陷。 </p><h3 id="1、运行速度慢"><a href="#1、运行速度慢" class="headerlink" title="1、运行速度慢"></a>1、运行速度慢</h3><p>就 C++ 而言，由于面向更高的逻辑抽象层，使得 C++ 在实现的时候，不得不做出性能上面的牺牲，有时候甚至是致命的 ( 所有对象的属性都经过内置多重指针的间接引用是其性能损失的主要原因之一)。<br>在计算机速度飞速发展的今天，你可能会说，一丁点的性能牺牲没什么大不了。是的，从面向对象的角度，使的编程的结构更加清晰完整，数据更加独立和易于管理，性能的牺牲可以带来这么多的好处，没有理由不做稳赚的生意吧？<br>不过，在某些对速度要求极高特殊场合，例如你做的是电信的交换系统，每秒钟有超过百万的人同时进行电话交换，如果，每一个数据交换过程都是一个对象，那么总的性能损失将是天文数字！！<br>或者这个例子不够贴身，再举个例子吧。假如你受聘于一个游戏设计公司，老板希望做出来的游戏可以更多的兼顾到更多的电脑使用者，游戏每秒钟的运行的帧可以 更多，子弹和爆炸物可以更多、更华丽。那么，你会发现使用 C++ 会使你的程序变得笨拙，无法满足你的需求。</p><h3 id="2、继承的代价庞大，增加了代码量"><a href="#2、继承的代价庞大，增加了代码量" class="headerlink" title="2、继承的代价庞大，增加了代码量"></a>2、继承的代价庞大，增加了代码量</h3><p>对于面向过程语言来说，编程时需要哪些变量和方法就只编写这些变量和方法，而对于面向对象语言来说，每次无论你要使用什么都要先写一个类，并且每一个类都要有独立的变量和方法，这样就会造成可能很简单的问题也要很多的类代码，为了解决这个缺点，继承便出现了，继承可以让类与类可以共享代码，获得代码的可重用性，一定程度上降低了代码量。但是，随着继承层次的增加，代码的复杂性会加速增长，随之而来的bug也会越来越难以发现。</p><h3 id="3、对象与对象之间相互依赖，耦合性太高"><a href="#3、对象与对象之间相互依赖，耦合性太高" class="headerlink" title="3、对象与对象之间相互依赖，耦合性太高"></a>3、对象与对象之间相互依赖，耦合性太高</h3><p>由于面向对象语言中一切都是对象，我们必须使用一个对象去创建另外一个对象，才能使用其内部方法，这样就造成了这些对象之间相互依赖，为了消除这些依赖，我们可以把创建对象的代码全部集中到一个对象之中，其他的对象都通过调用该对象的方法来动态的获取所需要的对象，这也就是我们所说的工厂模式。进一步地，我们可以不使用工厂，而是编写一个插件，该插件可以把我们所需要的对象在运行时动态地“塞”给我们，这就是依赖注入，也就是控制反转。这个插件就相当于Spring IOC。</p><h3 id="4、失去了灵活性"><a href="#4、失去了灵活性" class="headerlink" title="4、失去了灵活性"></a>4、失去了灵活性</h3><p>面向对象语言代码都很死板，继承也没有运行时动态，但是java的多态机制，其不同于面向过程语言的方法后期绑定，在运行时才能确定具体调用的是哪个方法一定程度上增加了其灵活性。面向对象语言一直提倡的组合大于继承的思想诞生了许许多多的设计模式，这些设计模式通过对组合和多态的奇妙运用大大的增加了面向对象语言的灵活性。</p><h3 id="5、需要一定的软件支持环境"><a href="#5、需要一定的软件支持环境" class="headerlink" title="5、需要一定的软件支持环境"></a>5、需要一定的软件支持环境</h3><p>面向对象方法学把分析、设计和实现很自然地联系在一起了。虽然面向对象设计原则上不依赖于特定的实现环境，但是实现结果和实现成本却在很大程度上取决于实现环境。因此，直接支持面向对象设计范式的面向对象程序语言、开发环境及类库，对于面向对象实现来说是非常重要的。<br>综上所述，其实在我们的学习过程中可以看到面向对象语言有许多优秀的地方，但也有一些缺陷，而我们一直都在努力地想尽各种办法去弥补这些缺陷，通过一些机制让面向对象语言越来越来趋于完善。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 程序设计语言原理 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坑</title>
      <link href="/2017/02/01/Begin-Hexo/"/>
      <url>/2017/02/01/Begin-Hexo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>第一次使用GitHub+Hexo搭建博客，过程磕磕绊绊，【泪目】【泪目】，但总之在搜集了一波大神博客之后，终于搭成自己的独立博客，心里超激动，小成就，在此记录一下。</p><p>初次搭建的博客使用next主题，页面不错（额……其实，个人感觉稍微有点单调）</p><p>希望以后能在自己的这一亩三分地辛勤耕耘吧！</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/02/01/hello-world/"/>
      <url>/2017/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux  socket 通信编程</title>
      <link href="/2019/12/26/Linux%20%20socket%E9%80%9A%E4%BF%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/12/26/Linux%20%20socket%E9%80%9A%E4%BF%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>示例：用C语言，基于linux提供的socket函数，编写一个实现“从客户端输入十个字符串，在服务器端完成字符数和单词数统计，并按首位字母排序”的远程计算的网络服务程序。 </p><a id="more"></a><h3 id="1、UDP编程说明"><a href="#1、UDP编程说明" class="headerlink" title="1、UDP编程说明"></a>1、UDP编程说明</h3><p>UDP协议的服务器端流程：</p><p>(1)建立套接字文件描述符，使用函数socket()，生成套接字文件描述符。</p><p>(2)设置服务器地址和侦听端口，初始化要绑定的网络地址结构。</p><p>(3)绑定侦听端口，使用bind()函数，将套接字文件描述符和一个地址类型变量进行绑定。</p><p>(4)接收客户端的数据，使用recvfrom()函数接收客户端的网络数据。</p><p>(5)向客户端发送数据，使用sendto()函数向服务器主机发送数据。</p><p>(6)关闭套接字，使用close()函数释放资源。UDP协议的客户端流程</p><p>UDP协议的客户端流程：</p><p>(1)建立套接字文件描述符，socket()；</p><p>(2)设置服务器地址和端口，struct sockaddr；</p><p>(3)向服务器发送数据，sendto()；</p><p>(4)接收服务器的数据，recvfrom()；</p><p>(5)关闭套接字，close()。</p><p><img src="https://i.loli.net/2019/12/31/kU7i4GObXKWndrw.png" alt="UDP.png"></p><center>UDP编程流程</center><h3 id="2、相关函数"><a href="#2、相关函数" class="headerlink" title="2、相关函数"></a>2、相关函数</h3><p>(1)  int socket(AF_INET, SOCK_DGRAM, 0);</p><p>创建udp socket，返回套接字描述符，UDP协议建立套接字的方式同TCP方式一样，使用socket()函数，只不过协议的类型使用SOCK_DGRAM，而不是SOCK_STREAM。</p><p>(2) int sendto(int sockfd, const void *data, int data_len, unsigned int flags, struct sockaddr *remaddr,sock_lenremaddr_len)</p><p>功能：基于UDP发送数据报，返回实际发送的数据长度，出错时返回－1</p><p>参数说明：</p><p>sockfd:套接字描述符</p><p>data:指向要发送数据的指针</p><p>data_len:数据长度</p><p>flags:通常为0</p><p>remaddr:远端地址：IP地址和端口号</p><p>remaddr_len:地址长度</p><p>(3) int recvfrom(int sockfd, void *buf,int buf_len,unsigned int flags,struct sockaddr *from,sock_len *fromlen);</p><p>功能：从UDP接收数据，返回实际接收的字节数，失败时返回－1</p><p>参数说明：</p><p>Sockfd:套接字描述符</p><p>buf:指向内存块的指针</p><p>buf_len:内存块大小，以字节为单位</p><p>flags:一般为0</p><p>from:远端的地址，IP地址和端口号</p><p>fromlen:远端地址长度</p><h3 id="3、程序编写"><a href="#3、程序编写" class="headerlink" title="3、程序编写"></a>3、程序编写</h3><p>(1) 用C语言编写客户端程序，创建一个socket通信，从客户端输入十个字符串。</p><p>(2) 编译客户端程序生成可执行文件</p><p>输入命令：gcc client1.c -o client1</p><p>​              ./client1</p><p><img src="https://i.loli.net/2019/12/31/nDbKUhktrEle2AM.png" alt="client.png"></p><center>编译客户端程序</center><p>(3) 用C语言编写服务器端程序，绑定客户端通信，接收从客户端输入的十个字符串，显示在屏幕上，并统计输入的字符串中总的单词数和字符数，并按首位字母的ASCII码值从高到低进行排列，输出显示到屏幕。</p><p>(4) 编译服务器端程序生成可执行文件</p><p>输入命令：gcc server1.c -o server1</p><p>​              ./server1</p><p><img src="https://i.loli.net/2019/12/31/P57M3ksLFhqHdyK.png" alt="server.png"></p><center>编译服务器端程序</center><h3 id="4、程序运行效果"><a href="#4、程序运行效果" class="headerlink" title="4、程序运行效果"></a>4、程序运行效果</h3><p>(1) 客户端输入十个字符串。</p><p>注：输入10个字符串时每行代表1个字符串，10字符串10行，由于字符串的输入是由 fgets() 函数实现的，所以获取字符串的时候会将空格符和换行符也进行保存，这点在后面进行总字符数的统计时也体现了出来，获取的字符串由结构体sendbuf[10]进行存储。</p><p><img src="https://i.loli.net/2019/12/31/HqKkpUYsr7o6OVA.png" alt="client_work.png"></p><p><cenetr>客户端运行效果</center></p><p>(2) 服务器端接收数据，显示在屏幕上，并统计输入的字符串中总的单词数和字符数，并按首位字母的ASCII码值从高到低进行排列，输出显示到屏幕。</p><p>注：统计总单词数相当于统计总空格数，空格数+1即为总单词数，字符数的统计结果包括了每个字符串的空格和换行符，每个字符串都有一个换行符，如图9，可以看到得到的总字符数85中包含了所有的空格符和换行符。利用冒泡排序，直接比较输入的10个字符串的首字母，实现字符串按首字母ASCII码值从大到小排列。</p><p><img src="https://i.loli.net/2019/12/31/ezErBTlbW7FoQSx.png" alt="server_work.png"></p><center>服务器端运行效果</center><h3 id="5、字符串排序说明"><a href="#5、字符串排序说明" class="headerlink" title="5、字符串排序说明"></a>5、字符串排序说明</h3><p>(1) 实现将10个字符串按首字母的ASCII码值从高到低进行排列并依次输出显示在屏幕上。</p><p>功能实现：输入的10个字符串设置结构体sendbuf[10]保存，再服务器端设置结构体recvbuf[10]接收数据，利用冒泡排序，先将每个字符串的首字母取出来，将其值赋给服务端接收缓冲区结构体的recvbuf[i].init成员（专门用于存储字符串的首字母），再直接比较recvbuf[i].init成员值的ASCII码值大小，实现从高到底排列并输出到屏幕上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">for (int n &#x3D; 0; n &lt; 10; n++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        int k &#x3D; n;</span><br><span class="line"></span><br><span class="line">​        for (int m &#x3D; n + 1; m &lt; 10; m++)</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            if (recvbuf[k].init &lt; recvbuf[m].init)</span><br><span class="line"></span><br><span class="line">​                k &#x3D; m;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        if (k !&#x3D; n)</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            temp &#x3D; recvbuf[n];</span><br><span class="line"></span><br><span class="line">​            recvbuf[n] &#x3D; recvbuf[k];</span><br><span class="line"></span><br><span class="line">​            recvbuf[k] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;字符串按首字母ASCII码值从大到小排列为：\n&quot;);</span><br><span class="line"></span><br><span class="line">​    for (int n &#x3D; 0; n &lt; 10; n++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        printf(&quot;%s&quot;, recvbuf[n].string_client);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、完整客户端、服务器端程序代码"><a href="#6、完整客户端、服务器端程序代码" class="headerlink" title="6、完整客户端、服务器端程序代码"></a>6、完整客户端、服务器端程序代码</h3><p>客户端程序源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;sys&#x2F;socket.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;netinet&#x2F;in.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;arpa&#x2F;inet.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;errno.h&gt;</span><br><span class="line"></span><br><span class="line">\#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">\#define MYPORT 8886</span><br><span class="line"></span><br><span class="line">char* SERVERIP &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line"></span><br><span class="line">\#define ERR_EXIT(m) \</span><br><span class="line"></span><br><span class="line">​    do \</span><br><span class="line"></span><br><span class="line">&#123; \</span><br><span class="line"></span><br><span class="line">​    perror(m); \</span><br><span class="line"></span><br><span class="line">​    exit(EXIT_FAILURE); \</span><br><span class="line"></span><br><span class="line">​    &#125; while(0)</span><br><span class="line"></span><br><span class="line">void echo_cli(int sock)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    struct sockaddr_in servaddr;</span><br><span class="line"></span><br><span class="line">​    memset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class="line"></span><br><span class="line">​    servaddr.sin_family &#x3D; AF_INET;</span><br><span class="line"></span><br><span class="line">​    servaddr.sin_port &#x3D; htons(MYPORT);</span><br><span class="line"></span><br><span class="line">​    servaddr.sin_addr.s_addr &#x3D; inet_addr(SERVERIP);</span><br><span class="line"></span><br><span class="line">​    int ret;</span><br><span class="line"></span><br><span class="line">​    struct client</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        char string_client[100];</span><br><span class="line"></span><br><span class="line">​    &#125;sendbuf[10];</span><br><span class="line"></span><br><span class="line">​    struct server</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        char string_client[100];</span><br><span class="line"></span><br><span class="line">​    &#125;recvbuf[10];</span><br><span class="line"></span><br><span class="line">​    &#x2F;&#x2F;struct client temp;</span><br><span class="line"></span><br><span class="line">​    &#x2F;&#x2F;struct server temp;</span><br><span class="line"></span><br><span class="line">​    int i;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;请输入10字符串：\n&quot;);</span><br><span class="line"></span><br><span class="line">​    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        fgets(sendbuf[i].string_client,100,stdin);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;向服务器发送：\n&quot;);</span><br><span class="line"></span><br><span class="line">​    for (i&#x3D;0; i&lt;10; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        printf(&quot;%s&quot;, sendbuf[i].string_client);</span><br><span class="line"></span><br><span class="line">​        sendto(sock, sendbuf[i].string_client, strlen(sendbuf[i].string_client), 0, (struct sockaddr *)&amp;servaddr, sizeof(servaddr));</span><br><span class="line"></span><br><span class="line">​        memset(sendbuf, 0, sizeof(sendbuf[i].string_client));</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    close(sock);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    int sock;</span><br><span class="line"></span><br><span class="line">​    if ((sock &#x3D; socket(PF_INET, SOCK_DGRAM, 0)) &lt; 0)</span><br><span class="line"></span><br><span class="line">​        ERR_EXIT(&quot;socket&quot;);</span><br><span class="line"></span><br><span class="line">​    echo_cli(sock);</span><br><span class="line"></span><br><span class="line">​    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端程序源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;errno.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;sys&#x2F;types.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;sys&#x2F;socket.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;netinet&#x2F;in.h&gt;</span><br><span class="line"></span><br><span class="line">\#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">\#define MYPORT 8886</span><br><span class="line"></span><br><span class="line">\#define ERR_EXIT(m) \</span><br><span class="line"></span><br><span class="line">​    do &#123; \</span><br><span class="line"></span><br><span class="line">​    perror(m); \</span><br><span class="line"></span><br><span class="line">​    exit(EXIT_FAILURE); \</span><br><span class="line"></span><br><span class="line">​    &#125; while (0)</span><br><span class="line"></span><br><span class="line">void echo_ser(int sock)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    &#x2F;&#x2F;char recvbuf[1024] &#x3D; &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">​    struct server</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        char string_client[100];</span><br><span class="line"></span><br><span class="line">​        char init;</span><br><span class="line"></span><br><span class="line">​    &#125;recvbuf[10];</span><br><span class="line"></span><br><span class="line">​    struct server temp;</span><br><span class="line"></span><br><span class="line">​    struct sockaddr_in peeraddr;</span><br><span class="line"></span><br><span class="line">​    socklen_t peerlen;</span><br><span class="line"></span><br><span class="line">​    int n;</span><br><span class="line"></span><br><span class="line">​    int i, nword&#x3D;0, nchar&#x3D;0;</span><br><span class="line"></span><br><span class="line">​    for (i&#x3D;0; i&lt;10; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;       </span><br><span class="line"></span><br><span class="line">​        peerlen &#x3D; sizeof(peeraddr);</span><br><span class="line"></span><br><span class="line">​        memset(recvbuf[i].string_client, 0, sizeof(recvbuf[i].string_client));</span><br><span class="line"></span><br><span class="line">​        n &#x3D; recvfrom(sock, recvbuf[i].string_client, sizeof(recvbuf[i].string_client), 0,</span><br><span class="line"></span><br><span class="line">​                     (struct sockaddr *)&amp;peeraddr, &amp;peerlen);</span><br><span class="line"></span><br><span class="line">​        if (n &lt;&#x3D; 0)</span><br><span class="line"></span><br><span class="line">​        &#123;            </span><br><span class="line"></span><br><span class="line">​            if (errno &#x3D;&#x3D; EINTR)</span><br><span class="line"></span><br><span class="line">​                continue;          </span><br><span class="line"></span><br><span class="line">​            ERR_EXIT(&quot;recvfrom error&quot;);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        else if(n &gt; 0)</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            printf(&quot;接收到的数据：%s&quot;,recvbuf[i].string_client);</span><br><span class="line"></span><br><span class="line">​            &#x2F;&#x2F;printf(&quot;%s&quot;,recvbuf[i].string_client);</span><br><span class="line"></span><br><span class="line">​            &#x2F;&#x2F;sendto(sock, recvbuf, n, 0,</span><br><span class="line"></span><br><span class="line">​            &#x2F;&#x2F;       (struct sockaddr *)&amp;peeraddr, peerlen);</span><br><span class="line"></span><br><span class="line">​            &#x2F;&#x2F;printf(&quot;回送的数据：%s\n&quot;,recvbuf[i].string_client);</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    int numWhiteSpace &#x3D; 0;</span><br><span class="line"></span><br><span class="line">​    int j &#x3D; 0;</span><br><span class="line"></span><br><span class="line">​    for (int n &#x3D; 0; n &lt; 10; n++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        char str[100];</span><br><span class="line"></span><br><span class="line">​        strcpy(str, recvbuf[n].string_client);</span><br><span class="line"></span><br><span class="line">​        &#x2F;&#x2F;printf(&quot;字符串：%s\n&quot;, str);</span><br><span class="line"></span><br><span class="line">​        recvbuf[n].init &#x3D; str[0];</span><br><span class="line"></span><br><span class="line">​        while (&#39;\0&#39; !&#x3D; str[j])</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            if (&#39; &#39; &#x3D;&#x3D; str[j])&#123;</span><br><span class="line"></span><br><span class="line">​                ++numWhiteSpace;   &#x2F;&#x2F;空格数</span><br><span class="line"></span><br><span class="line">​            &#125;</span><br><span class="line"></span><br><span class="line">​            ++j; &#x2F;&#x2F;字符数</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        nchar &#x3D; j + nchar;</span><br><span class="line"></span><br><span class="line">​        nword &#x3D; numWhiteSpace + 1+nword;</span><br><span class="line"></span><br><span class="line">​        j &#x3D; 0;</span><br><span class="line"></span><br><span class="line">​        numWhiteSpace &#x3D; 0;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;输入字符串的总单词数：%d\n&quot;, nword);</span><br><span class="line"></span><br><span class="line">​    printf(&quot;输入字符串的总字符数（包括空格、换行符）：%d\n&quot;, nchar); </span><br><span class="line"></span><br><span class="line">​    for (int n &#x3D; 0; n &lt; 10; n++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        int k &#x3D; n;</span><br><span class="line"></span><br><span class="line">​        for (int m &#x3D; n + 1; m &lt; 10; m++)</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            if (recvbuf[k].init &lt; recvbuf[m].init)</span><br><span class="line"></span><br><span class="line">​                k &#x3D; m;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​        if (k !&#x3D; n)</span><br><span class="line"></span><br><span class="line">​        &#123;</span><br><span class="line"></span><br><span class="line">​            temp &#x3D; recvbuf[n];</span><br><span class="line"></span><br><span class="line">​            recvbuf[n] &#x3D; recvbuf[k];</span><br><span class="line"></span><br><span class="line">​            recvbuf[k] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">​        &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;字符串按首字母ASCII码值从大到小排列为：\n&quot;);</span><br><span class="line"></span><br><span class="line">​    for (int n &#x3D; 0; n &lt; 10; n++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        printf(&quot;%s&quot;, recvbuf[n].string_client);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    close(sock);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    int sock;</span><br><span class="line"></span><br><span class="line">​    if ((sock &#x3D; socket(PF_INET, SOCK_DGRAM, 0)) &lt; 0)</span><br><span class="line"></span><br><span class="line">​        ERR_EXIT(&quot;socket error&quot;);</span><br><span class="line"></span><br><span class="line">​    struct sockaddr_in servaddr;</span><br><span class="line"></span><br><span class="line">​    memset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class="line"></span><br><span class="line">​    servaddr.sin_family &#x3D; AF_INET;</span><br><span class="line"></span><br><span class="line">​    servaddr.sin_port &#x3D; htons(MYPORT);</span><br><span class="line"></span><br><span class="line">​    servaddr.sin_addr.s_addr &#x3D; htonl(INADDR_ANY);  </span><br><span class="line"></span><br><span class="line">​    printf(&quot;监听%d端口\n&quot;,MYPORT);</span><br><span class="line"></span><br><span class="line">​    if (bind(sock, (struct sockaddr *)&amp;servaddr, sizeof(servaddr)) &lt; 0)</span><br><span class="line"></span><br><span class="line">​        ERR_EXIT(&quot;bind error&quot;);   </span><br><span class="line"></span><br><span class="line">​    echo_ser(sock);  </span><br><span class="line"></span><br><span class="line">​    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> socket通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器基础知识与配置</title>
      <link href="/2019/06/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/06/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>1、什么是守护进程？守护进程的类型和作用有哪些？</p><p>Linux 服务器在启动时需要启动很多系统服务，它们向本地和网络用户提供了Linux的系统功能接口，直接面向应用程序和用户。提供这些服务的程序是由运行在后台的守护进程来执行的。<a id="more"></a>守护进程是生存期长的一种进程。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。他们常常在系统引导装入时启动，在系统关闭时终止。linux系统有很多守护进程，大多数服务器都是用守护进程实现的。同时，守护进程完成许多系统任务，比如，作业规划进程crond、打印进程lqd等。</p><p>根据守护进程的启动和管理方式，可以分为独立启动守护进程和超级守护进程两类：</p><p>独立启动（stand_alone):该类进程启动后就常驻内存，所以会一直占用系统资源。其最大的优点就是它会一直启动，当外界有要求时相应速度较快，像httpd等进程。</p><p>超级守护进程：系统启动时由一个统一的守护进程xinet来负责管理一些进程，当相应请求到来时需要通过xinet的转接才可以唤醒被xinet管理的进 程。这种进程的优点时最初只有xinet这一守护进程占有系统资源，其他的内部服务并不一直占有系统资源，只有数据包到来时才会被xinet管理员来唤醒。并且我们还可以通过xinet来对它所管理的进程设置一些访问权限，相当于多了一层管理机制。</p><p>2.linux的init进程是怎样的进程？细说init和linux上的各服务进程之间的关系？</p><p>init是Linux系统操作中不可缺少的程序之一。所谓的init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。</p><p>所以,init始终是第一个进程（其进程编号始终为1）。内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p><p>init进程由0进程创建，完成系统的初始化，是系统中所有其他用户进程的祖先进程。</p><p>3.Apache服务器的配置文件httpd.conf中有很多内容，请解释如下配置项：</p><p>（1）MaxKeepAliveRequests 200 </p><p>允许每次连接的最大请求数目，此为200。</p><p>（2）UserDir public_html</p><p>设定用户放置网页的目录。</p><p>（3）DefaultType text/plain </p><p>设置服务器对于不认识的文件类型的预设格式。</p><p>（4）AddLanguare en.en</p><p>设置可传送语言的文件给浏览器。</p><p>（5）DocumentRoot“/usr/local/httpd/htdocs”</p><p>该目录为Apache放置网页的地方。</p><p>（6）AddType application/x-httpd-php.php.php.php4</p><p>服务器选择使用php4。</p><p>（7）port 1080 </p><p>将apache服务器的端口号设定为1080。</p><p>（8）UserDir userdoc</p><p>设定用户网页目录为userdoc。</p><p>（9）DocumentRoot “/home/htdocs”</p><p>设定apache服务器的网页根目录:/home/htdocs。</p><p>（10）Options Indexes FollowSymLinks   AllowOverride None </p><p>Order deny,allow     deny from all     allow from 192.168.1.5</p><p>在此apache服务器上设定一个目录/home/htdocs/inside，且此目录只允许IP地址为192.168.1.5的主机访问。</p><p>（11）Server Type Standlone</p><p>定义apache服务器以独立进程的方式运行。</p><p>4.什么是Apache的虚拟主机？其作用是什么？Apache虚拟主机实现方法有哪些？</p><p>Apache是开源的web服务软件之一，也是现在开源系统比如centos上安装web服务常见软件；虚拟主机是提供网站服务的集成环境，比如：linux Apache+php+mysq、LAMP。就是常说的建站开通的虚拟空间，所以Apache服务器只是虚拟空间的一种架构。在一个Apache服务器上可以配置多个虚拟主机，实现一个服务器提供多站点服务，其实就是访问同一个服务器上的不同目录。</p><p>Apache虚拟主机的配置方式主要有三种，即基于IP、基于port、以及基于域名。</p><p>5.简述使用ftp进行文件传输时的两种登录方式？它们的区别是什么？常用的ftp文件传输命令有哪些？</p><p>ftp有两种登录方式：匿名登录和授权登录。使用匿名登录时，用户名为：anonymous，密码为：任何合法email地址；使用授权登录时，用户名为用户在远程系统中的用户帐号，密码为用户在远程系统中的用户密码。</p><p>区别：使用匿名登录只能访问ftp目录下的资源，默认配置下只能下载；而授权登录访问的权限大于匿名登录，且上载、下载均可。</p><p>ftp文件传输有两种文件传输模式：ASCII模式和二进制数据模式。ASCII模式用来传输文本文件，其他文件的传输使用binary模式。</p><p>常用的ftp文件传输命令为：bin、asc、put、get、mput、mget、prompt、bye。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 编程实例</title>
      <link href="/2019/06/03/Linux%20%E7%BC%96%E7%A8%8B%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/06/03/Linux%20%E7%BC%96%E7%A8%8B%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>示例：用C语言编写一个从键盘输入10名学生的姓名、性别、学号和家庭住址，然后按照学号排序，并将排序后的结果在屏幕上按对齐的方式打印输出的程序。</p><a id="more"></a><p>C语言排序程序源码 (学号按从高到低排序)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输入10名学生的姓名，性别，学号，家庭住址；</span><br><span class="line"></span><br><span class="line">struct student</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    char name[10];</span><br><span class="line"></span><br><span class="line">​    char sex[4];  </span><br><span class="line"></span><br><span class="line">​    int id;</span><br><span class="line"></span><br><span class="line">​    char address[50];</span><br><span class="line"></span><br><span class="line">&#125;info[10];</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    struct student temp;</span><br><span class="line"></span><br><span class="line">​    int i,j, k;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;请输入10个学生的信息:姓名、性别、学号、家庭住址\n&quot;);</span><br><span class="line"></span><br><span class="line">​    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       &#x2F;&#x2F;printf(&quot;请输入第%d位学生的信息:姓名、性别、学号、家庭住址\n&quot;, i + 1);</span><br><span class="line"></span><br><span class="line">​       scanf(&quot;%s%s%d%s&quot;, info[i].name, &amp;info[i].sex, &amp;info[i].id, &amp;info[i].address);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       k &#x3D; i;</span><br><span class="line"></span><br><span class="line">​       for (j &#x3D; i + 1; j &lt; 10; j++)</span><br><span class="line"></span><br><span class="line">​       &#123;</span><br><span class="line"></span><br><span class="line">​              if (info[k].id &lt; info[j].id)</span><br><span class="line"></span><br><span class="line">​                     k &#x3D; j;</span><br><span class="line"></span><br><span class="line">​       &#125;</span><br><span class="line"></span><br><span class="line">​       if (k !&#x3D; i)</span><br><span class="line"></span><br><span class="line">​       &#123;</span><br><span class="line"></span><br><span class="line">​              temp &#x3D; info[i];</span><br><span class="line"></span><br><span class="line">​              info[i] &#x3D; info[k];</span><br><span class="line"></span><br><span class="line">​              info[k] &#x3D; temp;</span><br><span class="line"></span><br><span class="line">​       &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    printf(&quot;10个学生的信息按序号由高到低排序为\n&quot;);</span><br><span class="line"></span><br><span class="line">​    for (i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       printf(&quot;%s\t%s\t%d\t%s\n&quot;, info[i].name, info[i].sex, info[i].id, info[i].address);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象语言的缺点和问题</title>
      <link href="/2019/01/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BC%BA%E7%82%B9%E5%92%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/01/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BC%BA%E7%82%B9%E5%92%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>面向对象编程是一种计算机编程架构。面向对象编程的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。面向对象编程达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p><a id="more"></a><p>刚开始学习C++ 时，我们首先了解到的就是面向对象语言的四个基本特征：抽象、继承、封装、多态、以及一大堆面向对象语言的优点包括代码重用，权限控制，易扩展，开发效率高之类的。毫无疑问面向对象编程的出现使人们的编程与实际的世界更加接近，所有的对象被赋予属性和方法，结果编程就更加富有人性化，但同时面向对象语言从诞生之日起就一直伴随着许多的缺陷。<br>1、运行速度慢<br>就 C++ 而言，由于面向更高的逻辑抽象层，使得 C++ 在实现的时候，不得不做出性能上面的牺牲，有时候甚至是致命的 ( 所有对象的属性都经过内置多重指针的间接引用是其性能损失的主要原因之一)。<br>在计算机速度飞速发展的今天，你可能会说，一丁点的性能牺牲没什么大不了。是的，从面向对象的角度，使的编程的结构更加清晰完整，数据更加独立和易于管理，性能的牺牲可以带来这么多的好处，没有理由不做稳赚的生意吧？<br>不过，在某些对速度要求极高特殊场合，例如你做的是电信的交换系统，每秒钟有超过百万的人同时进行电话交换，如果，每一个数据交换过程都是一个对象，那么总的性能损失将是天文数字！！<br>或者这个例子不够贴身，再举个例子吧。假如你受聘于一个游戏设计公司，老板希望做出来的游戏可以更多的兼顾到更多的电脑使用者，游戏每秒钟的运行的帧可以 更多，子弹和爆炸物可以更多、更华丽。那么，你会发现使用 C++ 会使你的程序变得笨拙，无法满足你的需求。<br>2、继承的代价庞大，增加了代码量<br>对于面向过程语言来说，编程时需要哪些变量和方法就只编写这些变量和方法，而对于面向对象语言来说，每次无论你要使用什么都要先写一个类，并且每一个类都要有独立的变量和方法，这样就会造成可能很简单的问题也要很多的类代码，为了解决这个缺点，继承便出现了，继承可以让类与类可以共享代码，获得代码的可重用性，一定程度上降低了代码量。但是，随着继承层次的增加，代码的复杂性会加速增长，随之而来的bug也会越来越难以发现。<br>3、对象与对象之间相互依赖，耦合性太高<br>由于面向对象语言中一切都是对象，我们必须使用一个对象去创建另外一个对象，才能使用其内部方法，这样就造成了这些对象之间相互依赖，为了消除这些依赖，我们可以把创建对象的代码全部集中到一个对象之中，其他的对象都通过调用该对象的方法来动态的获取所需要的对象，这也就是我们所说的工厂模式。进一步地，我们可以不使用工厂，而是编写一个插件，该插件可以把我们所需要的对象在运行时动态地“塞”给我们，这就是依赖注入，也就是控制反转。这个插件就相当于Spring IOC。<br>4、失去了灵活性<br>面向对象语言代码都很死板，继承也没有运行时动态，但是java的多态机制，其不同于面向过程语言的方法后期绑定，在运行时才能确定具体调用的是哪个方法一定程度上增加了其灵活性。面向对象语言一直提倡的组合大于继承的思想诞生了许许多多的设计模式，这些设计模式通过对组合和多态的奇妙运用大大的增加了面向对象语言的灵活性。<br>5、需要一定的软件支持环境<br>面向对象方法学把分析、设计和实现很自然地联系在一起了。虽然面向对象设计原则上不依赖于特定的实现环境，但是实现结果和实现成本却在很大程度上取决于实现环境。因此，直接支持面向对象设计范式的面向对象程序语言、开发环境及类库，对于面向对象实现来说是非常重要的。<br>综上所述，其实在我们的学习过程中可以看到面向对象语言有许多优秀的地方，但也有一些缺陷，而我们一直都在努力地想尽各种办法去弥补这些缺陷，通过一些机制让面向对象语言越来越来趋于完善。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计语言原理 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> C++ </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原上二把刀</title>
      <link href="/2017/02/01/%E4%BD%A0%E5%A5%BD-Hexo/"/>
      <url>/2017/02/01/%E4%BD%A0%E5%A5%BD-Hexo/</url>
      
        <content type="html"><![CDATA[<p>第一次使用GitHub+Hexo搭建博客，过程磕磕绊绊，【泪目】【泪目】，但总之在搜集了一波大神博客之后，终于搭成自己的独立博客，心里超激动，小成就，在此记录一下。</p><p>初次搭建的博客使用next主题，页面不错（额……其实，个人感觉稍微有点单调）</p><p>希望以后能在自己的这一亩三分地辛勤耕耘吧！</p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/02/01/hello-world/"/>
      <url>/2017/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

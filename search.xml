<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MNIST手写字符集的数据解析</title>
      <link href="/2020/10/18/Data-analysis-of-MNIST-handwritten-character-set/"/>
      <url>/2020/10/18/Data-analysis-of-MNIST-handwritten-character-set/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>最近在做MNIST手写字识别，官方MNIST数据集为 .idx3-ubyte 格式，程序无法直接读取，涉及MNIST数据集的解析。</p><p>MNIST数据集：<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a></p><a id="more"></a><h3 id="2-数据集说明"><a href="#2-数据集说明" class="headerlink" title="2.数据集说明"></a>2.数据集说明</h3><p>官网数据集说明：</p><blockquote><p>train-images-idx3-ubyte.gz:  training set images (9912422 bytes)<br>train-labels-idx1-ubyte.gz:  training set labels (28881 bytes)<br>t10k-images-idx3-ubyte.gz:   test set images (1648877 bytes)<br>t10k-labels-idx1-ubyte.gz:   test set labels (4542 bytes)</p></blockquote><p>一个四个文件，训练图片集、训练特征集、测试图片集、测试特征集。</p><p>官网对图片集和特征集的说明如下：</p><p><strong>TRAINING SET LABEL FILE (train-labels-idx1-ubyte):</strong></p><div class="table-container"><table><thead><tr><th>[offset]</th><th>[type]</th><th style="text-align:left">[value]</th><th>[description]</th></tr></thead><tbody><tr><td>0000</td><td>32 bit integer</td><td style="text-align:left">0x00000801(2049)</td><td>magic number (MSB first)</td></tr><tr><td>0004</td><td>32 bit integer</td><td style="text-align:left">60000</td><td>number of items</td></tr><tr><td>0008</td><td>unsigned byte</td><td style="text-align:left">??</td><td>label</td></tr><tr><td>0009</td><td>unsigned byte</td><td style="text-align:left">??</td><td>label</td></tr><tr><td>……</td><td></td><td style="text-align:left"></td></tr></tbody></table></div><p>The labels values are 0 to 9.</p><p><strong>TRAINING SET IMAGE FILE (train-images-idx3-ubyte):</strong></p><div class="table-container"><table><thead><tr><th>[offset]</th><th>[type]</th><th>[value]</th><th>[description]</th></tr></thead><tbody><tr><td>0000</td><td>32 bit integer</td><td>0x00000803(2051)</td><td>magic number</td></tr><tr><td>0004</td><td>32 bit integer</td><td>60000</td><td>number of images</td></tr><tr><td>0008</td><td>32 bit integer</td><td>28</td><td>number of rows</td></tr><tr><td>0012</td><td>32 bit integer</td><td>28</td><td>number of columns</td></tr><tr><td>0016</td><td>unsigned byte</td><td>??</td><td>pixel</td></tr><tr><td>0017</td><td>unsigned byte</td><td>??</td><td>pixel</td></tr><tr><td>……</td><td></td><td></td></tr></tbody></table></div><p>Pixels are organized row-wise. Pixel values are 0 to 255. 0 means background (white), 255 means foreground (black).</p><h3 id="3-二进制文件解析"><a href="#3-二进制文件解析" class="headerlink" title="3.二进制文件解析"></a>3.二进制文件解析</h3><p>Python中解析二进制文件需要用到Struct模块，Struct的基本函数说明参考：<a href="https://wnxy.xyz/2020/10/17/Daily-usage-of-Struct-module-in-Python/">https://wnxy.xyz/2020/10/17/Daily-usage-of-Struct-module-in-Python/</a></p><p>相关代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">file1=<span class="string">"./MNIST_data/train-images.idx3-ubyte"</span></span><br><span class="line">file2=<span class="string">"./MNIST_data/train-labels.idx1-ubyte"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_images_ana</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    <span class="string">"""解析图片数据集 .idx3-ubyte格式"""</span></span><br><span class="line">    <span class="comment"># 以二进制方式读取文件</span></span><br><span class="line">    <span class="keyword">with</span> open(filepath,<span class="string">'rb'</span>) <span class="keyword">as</span> fbj:</span><br><span class="line">        bin_data=fbj.read()</span><br><span class="line">    offset=<span class="number">0</span></span><br><span class="line">    magic_num,image_num,rows_num,column_num=struct.unpack_from(<span class="string">'&gt;iiii'</span>,bin_data,offset)</span><br><span class="line">    offset+=struct.calcsize(<span class="string">'&gt;iiii'</span>)</span><br><span class="line">    imgsize=image_num*rows_num*column_num</span><br><span class="line">    fmt_image=<span class="string">'&gt;'</span>+str(imgsize)+<span class="string">'B'</span>      <span class="comment"># 训练集数据有60000*28*28</span></span><br><span class="line">    images=struct.unpack_from(fmt_image,bin_data,offset)</span><br><span class="line">    img=np.reshape(images,(image_num,rows_num*column_num))     <span class="comment"># 构造一个60000*784的矩阵</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_labels_ana</span><span class="params">(filepath)</span>:</span></span><br><span class="line">    <span class="string">"""解析特征数据集 .idx1-ubyte格式"""</span></span><br><span class="line">    <span class="comment"># 以二进制格式处理文件</span></span><br><span class="line">    <span class="keyword">with</span> open(filepath,<span class="string">'rb'</span>) <span class="keyword">as</span> fbj:</span><br><span class="line">        bin_data=fbj.read()</span><br><span class="line">    offset=<span class="number">0</span></span><br><span class="line">    magic_num,items_num=struct.unpack_from(<span class="string">'&gt;ii'</span>,bin_data,offset)</span><br><span class="line">    offset+=struct.calcsize(<span class="string">'&gt;ii'</span>)</span><br><span class="line">    fmt_label=<span class="string">'&gt;'</span>+str(items_num)+<span class="string">'B'</span></span><br><span class="line">    labels=struct.unpack_from(fmt_label,bin_data,offset)</span><br><span class="line">    label=np.reshape(labels,[items_num])</span><br><span class="line">    <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    imgs=train_images_ana(file1)</span><br><span class="line">    <span class="comment"># 查看前10个手写字灰度图</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        img=np.reshape(imgs[i],[<span class="number">28</span>,<span class="number">28</span>])</span><br><span class="line">        plt.imshow(img,cmap=<span class="string">'gray'</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">    labels=train_labels_ana(file2)</span><br><span class="line">    <span class="comment">#print(labels)</span></span><br></pre></td></tr></table></figure><p>相关文章：</p><ul><li><a href="https://wnxy.xyz/2020/10/17/Daily-usage-of-Struct-module-in-Python/">Python中Struct模块的日常用法</a></li></ul><p>参考文章：</p><ul><li><a href="https://blog.csdn.net/qq_32166627/article/details/62218072" target="_blank" rel="noopener">mnist数据集解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Machine-Learning </tag>
            
            <tag> 数据解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中Struct模块的日常用法</title>
      <link href="/2020/10/17/Daily-usage-of-Struct-module-in-Python/"/>
      <url>/2020/10/17/Daily-usage-of-Struct-module-in-Python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>最近在训练mnist字符集时用到二进制数据的处理，面向Google编程后稍稍搞懂了一点，故做一点笔记，以作备忘。</strong></p><p>Python 中用来处理二进制数据时采用 Struct 模块。</p><p>Struct模块中最常用的函数为:</p><a id="more"></a><ul><li>pack()</li><li>unpack()</li><li>pack_into()</li><li>unpack_from()</li><li>calcsize()</li></ul><p>pack(fmt, v1, v2, …)  ： 按照给定的格式 fmt（format），把数据封装成字符串。</p><p>unpack(fmt, string) ： 按照给定的格式(fmt)解析字节流 string，解析结果为元组。</p><p>struct.pack_into(fmt, buffer, offset, v1, v2, …) ： 把values：<em>v1, v2, …</em>打包按格式<em>fmt</em>转换后写入指定的内存 <em>buffer</em> 中，并且可以指定<em>buffer</em>中的<em>offset</em>即偏移量，从哪里开始写。</p><p>struct.unpack_from(fmt, buffer, offset=0) ： 从内存中的指定 <em>buffer</em> 区读取出来，然后按照 <em>fmt</em> 格式解析。可以指定<em>offset</em>，从 <em>buffer</em> 的哪个位置开始读取。</p><p>calcsize(fmt) ： 计算给定的格式(fmt)占用多少字节的内存 。</p><p>Struct中支持的格式如下表：</p><div class="table-container"><table><thead><tr><th>Format</th><th>C Type</th><th>Python</th><th>字节数</th></tr></thead><tbody><tr><td>x</td><td>pad byte</td><td>no value</td><td>1</td></tr><tr><td>c</td><td>char</td><td>string of length 1</td><td>1</td></tr><tr><td>b</td><td>signed char</td><td>integer</td><td>1</td></tr><tr><td>B</td><td>unsigned char</td><td>integer</td><td>1</td></tr><tr><td>?</td><td>_Bool</td><td>bool</td><td>1</td></tr><tr><td>h</td><td>short</td><td>integer</td><td>4</td></tr><tr><td>H</td><td>unsigned short</td><td>integer</td><td>4</td></tr><tr><td>i</td><td>int</td><td>integer</td><td>4</td></tr><tr><td>I</td><td>unsigned int</td><td>integer of long</td><td>4</td></tr><tr><td>l</td><td>long</td><td>integer</td><td>4</td></tr><tr><td>L</td><td>unsigned long</td><td>long</td><td>4</td></tr><tr><td>q</td><td>long long</td><td>long</td><td>8</td></tr><tr><td>Q</td><td>unsigned long long</td><td>long</td><td>8</td></tr><tr><td>f</td><td>float</td><td>float</td><td>4</td></tr><tr><td>d</td><td>double</td><td>float</td><td>8</td></tr><tr><td>s</td><td>char[]</td><td>string</td><td>1</td></tr><tr><td>p</td><td>char[]</td><td>string</td><td>1</td></tr><tr><td>P</td><td>void *</td><td>long</td></tr></tbody></table></div><p><strong>q和Q只在机器支持64位操作时有意思</strong></p><p><strong>每个格式前可以有一个数字，表示个数</strong></p><p><strong>s格式表示一个长度的字符串，4s表示长度为4的字符串，但是p表示的是pascal字符串</strong></p><p><strong>P用来转换一个指针，其长度和机器字长相关</strong></p><p><strong>最后一个可以用来表示指针类型的，占4个字节</strong></p><p>参考文章：<a href="https://www.cnblogs.com/gala/archive/2011/09/22/2184801.html" target="_blank" rel="noopener">https://www.cnblogs.com/gala/archive/2011/09/22/2184801.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Struct模块 </tag>
            
            <tag> 二进制处理 </tag>
            
            <tag> Binary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习——逻辑回归算法（Logistic Regression）思想及算法实现</title>
      <link href="/2020/10/11/Machine-learning-logistic-regression-algorithm/"/>
      <url>/2020/10/11/Machine-learning-logistic-regression-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-分类原理"><a href="#1-分类原理" class="headerlink" title="1.分类原理"></a>1.分类原理</h1><h2 id="1-1-逻辑回归"><a href="#1-1-逻辑回归" class="headerlink" title="1.1 逻辑回归"></a>1.1 逻辑回归</h2><p>逻辑回归算法是一个分类算法，其性质是它的输出值永远在0到1之间，是目前最流行、最广泛使用的一直学习算法。</p><h2 id="1-2-Sigmoid函数"><a href="#1-2-Sigmoid函数" class="headerlink" title="1.2 Sigmoid函数"></a>1.2 Sigmoid函数</h2><p>根据线性回归模型我们只能预测连续的值，然而对于分类问题，我们需要输出0或1，此时引入逻辑回归模型，模型核心为Sigmoid函数，公式为：$g(z)=\frac{1}{1+e^{-z}}$</p><p>其中：$z=-\Theta^{T} X$</p><a id="more"></a><p>该函数图像为：</p><p><img src="/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wnxy/wnxy_pic@master/img/sigmoid.png" alt=""></p><p>$h_{\Theta}(x)$的作用是对于给定的输入变量，根据选择的参数计算出输出变量=1的可能性。</p><h2 id="1-3-代价函数"><a href="#1-3-代价函数" class="headerlink" title="1.3 代价函数"></a>1.3 代价函数</h2><p>在逻辑回归中可以判定当$h_{\Theta}(x)$大于等于0.5时，预测y=1。</p><p>当$h_{\Theta}(x)$小于0.5时，预测y=0。</p><p>逻辑回归中使用最大似然法来拟合参数：<a href="https://www.codecogs.com/eqnedit.php?latex=z=\Theta&space;_{0}&plus;\Theta&space;_{1}x_{1}&plus;\Theta&space;_{2}x_{2}&plus;...&plus;\Theta&space;_{n}x_{n}" target="_blank"><img src="/loading.gif" data-original="https://latex.codecogs.com/gif.latex?z=\Theta&space;_{0}&plus;\Theta&space;_{1}x_{1}&plus;\Theta&space;_{2}x_{2}&plus;...&plus;\Theta&space;_{n}x_{n}" title="z=\Theta _{0}+\Theta _{1}x_{1}+\Theta _{2}x_{2}+...+\Theta _{n}x_{n}" /></a></p><p>训练样本的特征向量为：<a href="https://www.codecogs.com/eqnedit.php?latex=x\epsilon&space;\begin{bmatrix}x_{0}&space;\\&space;x_{1}&space;\\&space;...&space;\\x_{n}&space;\end{bmatrix}" target="_blank"><img src="/loading.gif" data-original="https://latex.codecogs.com/gif.latex?x\epsilon&space;\begin{bmatrix}x_{0}&space;\\&space;x_{1}&space;\\&space;...&space;\\x_{n}&space;\end{bmatrix}" title="x\epsilon \begin{bmatrix}x_{0} \\ x_{1} \\ ... \\x_{n} \end{bmatrix}" /></a></p><p>其中：<a href="https://www.codecogs.com/eqnedit.php?latex=x_{0}=1,y\epsilon&space;\left&space;\{&space;0&space;,1\right&space;\}" target="_blank"><img src="/loading.gif" data-original="https://latex.codecogs.com/gif.latex?x_{0}=1,y\epsilon&space;\left&space;\{&space;0&space;,1\right&space;\}" title="x_{0}=1,y\epsilon \left \{ 0 ,1\right \}" /></a></p><p>构建代价函数为：<a href="https://www.codecogs.com/eqnedit.php?latex=J\left&space;(&space;\Theta&space;\right&space;)=-\frac{1}{m}\sum_{i=1}^{m}\left&space;[&space;y^{\left&space;(&space;i&space;\right&space;)}log\left&space;(&space;h_{\Theta&space;}\left&space;(&space;x^{\left&space;(&space;i&space;\right&space;)}&space;\right&space;)&space;\right&space;)&space;&plus;\left&space;(&space;1-y^{\left&space;(&space;i&space;\right&space;)}&space;\right&space;)log\left&space;(&space;1-h_{\Theta&space;}&space;\left&space;(&space;x^{\left&space;(&space;i&space;\right&space;)}&space;\right&space;)\right&space;)\right&space;]" target="_blank"><img src="/loading.gif" data-original="https://latex.codecogs.com/gif.latex?J\left&space;(&space;\Theta&space;\right&space;)=-\frac{1}{m}\sum_{i=1}^{m}\left&space;[&space;y^{\left&space;(&space;i&space;\right&space;)}log\left&space;(&space;h_{\Theta&space;}\left&space;(&space;x^{\left&space;(&space;i&space;\right&space;)}&space;\right&space;)&space;\right&space;)&space;&plus;\left&space;(&space;1-y^{\left&space;(&space;i&space;\right&space;)}&space;\right&space;)log\left&space;(&space;1-h_{\Theta&space;}&space;\left&space;(&space;x^{\left&space;(&space;i&space;\right&space;)}&space;\right&space;)\right&space;)\right&space;]" title="J\left ( \Theta \right )=-\frac{1}{m}\sum_{i=1}^{m}\left [ y^{\left ( i \right )}log\left ( h_{\Theta }\left ( x^{\left ( i \right )} \right ) \right ) +\left ( 1-y^{\left ( i \right )} \right )log\left ( 1-h_{\Theta } \left ( x^{\left ( i \right )} \right )\right )\right ]" /></a></p><p>使用梯度下降算法求使得代价函数最小的参数：</p><p><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/10/12/0WELAx.png" alt=""></p><h1 id="2-算法实现"><a href="#2-算法实现" class="headerlink" title="2.算法实现"></a>2.算法实现</h1><h2 id="2-1-Sigmoid函数python实现"><a href="#2-1-Sigmoid函数python实现" class="headerlink" title="2.1 Sigmoid函数python实现"></a>2.1 Sigmoid函数python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义sigmoid函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br></pre></td></tr></table></figure><h2 id="2-2-梯度下降算法python实现"><a href="#2-2-梯度下降算法python实现" class="headerlink" title="2.2 梯度下降算法python实现"></a>2.2 梯度下降算法python实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradAscent</span><span class="params">(dataMatIn, classLabels)</span>:</span></span><br><span class="line">    dataMatrix = mat(dataMatIn)  <span class="comment"># 转换为矩阵</span></span><br><span class="line">    labelMat = mat(classLabels).transpose()  <span class="comment"># 转换为矩阵</span></span><br><span class="line"></span><br><span class="line">    m, n = shape(dataMatrix)</span><br><span class="line">    alpha = <span class="number">0.001</span>   <span class="comment"># 学习率</span></span><br><span class="line">    maxCycles = <span class="number">505</span>   <span class="comment"># 迭代次数</span></span><br><span class="line">    weights = ones((n, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(maxCycles):  <span class="comment"># 迭代拟合参数</span></span><br><span class="line">        h = sigmoid(dataMatrix * weights)  <span class="comment"># 求h</span></span><br><span class="line">        error = (h - labelMat)    <span class="comment"># 求误差量</span></span><br><span class="line">        weights=weights-alpha*dataMatrix.transpose()*error/len(dataMatrix)</span><br><span class="line">    <span class="keyword">return</span> weights</span><br></pre></td></tr></table></figure><h1 id="3-数据集说明"><a href="#3-数据集说明" class="headerlink" title="3.数据集说明"></a>3.数据集说明</h1><p>参考数据集网址: <a href="http://archive.ics.uci.edu/ml/" target="_blank" rel="noopener">http://archive.ics.uci.edu/ml/</a></p><p>本次机器学习逻辑回归算法实现分类使用的是经典数据集 Iris Data（鸢尾花数据集），数据集包含3个类（Iris Setosa、Iris Versicolour、Iris Virginica），每个类有50个实例，其中每个类都涉及一种鸢尾花品种。预测的属性为鸢尾花植物的类别。</p><p>此次算法实现中删掉了其中一个鸢尾花种类，算法引入的数据集只做鸢尾花种类的二分类，并且分别将鸢尾花种类数据集按 8：2 的比例分为训练数据集和测试数据集。</p><p>鸢尾花数据集的属性信息：</p><ul><li>萼片长度（厘米）</li><li>萼片宽度（厘米）</li><li>花瓣长度（厘米）</li><li>花瓣宽度（厘米）</li></ul><p>逻辑回归分类算法的模型训练过程使用鸢尾花的全部四个特征，将鸢尾花样本可视化及分类可视化过程选取了鸢尾花的前两个属性（萼片长度、萼片宽度）。</p><h1 id="4-程序说明"><a href="#4-程序说明" class="headerlink" title="4.程序说明"></a>4.程序说明</h1><h2 id="4-1-载入数据集"><a href="#4-1-载入数据集" class="headerlink" title="4.1 载入数据集"></a>4.1 载入数据集</h2><p>将源数据集载入算法，并初始处理样本，将鸢尾花种类分为正向类和负向类。函数返回鸢尾花的特征向量和对应的鸢尾花种类向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""载入数据集"""</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path=<span class="string">"iris_train.data"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""读取数据"""</span></span><br><span class="line">    x_data=[]</span><br><span class="line">    y_data=[]</span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f_obj:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f_obj.readlines():</span><br><span class="line">            lineArr=line.strip().split(<span class="string">','</span>)</span><br><span class="line">            lineArr.insert(<span class="number">0</span>,<span class="number">1.0</span>)</span><br><span class="line">            <span class="keyword">if</span> (lineArr[<span class="number">-1</span>]==<span class="string">'Iris-setosa'</span>):</span><br><span class="line">                y_data.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span>(lineArr[<span class="number">-1</span>]==<span class="string">'Iris-versicolor'</span>):</span><br><span class="line">                y_data.append(<span class="number">1</span>)</span><br><span class="line">            x_data.append(list(map(float, lineArr[:<span class="number">-1</span>])))</span><br><span class="line">        <span class="keyword">return</span> x_data,y_data</span><br></pre></td></tr></table></figure><h2 id="4-2-分类可视化"><a href="#4-2-分类可视化" class="headerlink" title="4.2 分类可视化"></a>4.2 分类可视化</h2><h3 id="4-2-1-鸢尾花数据集二分类"><a href="#4-2-1-鸢尾花数据集二分类" class="headerlink" title="4.2.1 鸢尾花数据集二分类"></a>4.2.1 鸢尾花数据集二分类</h3><p>为了直观理解分类结果，便于可视化，利用matplotlib库的pyplot函数，按照鸢尾花数据特征中的萼片长度、萼片宽度属性绘制训练数据集的散点图，并绘制判定边界。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotBestFit</span><span class="params">(weights)</span>:</span></span><br><span class="line">    dataMat, labelMat = loadDataSet()</span><br><span class="line">    dataArr = array(dataMat)</span><br><span class="line">    n = shape(dataArr)[<span class="number">0</span>]</span><br><span class="line">    xcord1,xcord2 = [],[]</span><br><span class="line">    ycord1,ycord2 = [],[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> int(labelMat[i]) == <span class="number">1</span>:</span><br><span class="line">            xcord1.append(dataArr[i, <span class="number">1</span>])</span><br><span class="line">            ycord1.append(dataArr[i, <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            xcord2.append(dataArr[i, <span class="number">1</span>])</span><br><span class="line">            ycord2.append(dataArr[i, <span class="number">2</span>])</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax.scatter(xcord1, ycord1, s=<span class="number">30</span>, c=<span class="string">'red'</span>, marker=<span class="string">'s'</span>)</span><br><span class="line">    ax.scatter(xcord2, ycord2, s=<span class="number">30</span>, c=<span class="string">'green'</span>)</span><br><span class="line">    x = arange(<span class="number">3.0</span>, <span class="number">8.0</span>, <span class="number">0.1</span>)</span><br><span class="line">    y = (-(float)(weights[<span class="number">0</span>][<span class="number">0</span>]) - (float)(weights[<span class="number">1</span>][<span class="number">0</span>]) * x) / (float)(weights[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    plt.title(<span class="string">'Iris data set classification'</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Sepal length'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Sepal width'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="4-2-分类结果"><a href="#4-2-分类结果" class="headerlink" title="4.2 分类结果"></a>4.2 分类结果</h3><p><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/10/12/0RzjyV.png" alt=""></p><h2 id="4-3-鸢尾花测试集预测"><a href="#4-3-鸢尾花测试集预测" class="headerlink" title="4.3 鸢尾花测试集预测"></a>4.3 鸢尾花测试集预测</h2><h3 id="4-3-1-预测函数"><a href="#4-3-1-预测函数" class="headerlink" title="4.3.1 预测函数"></a>4.3.1 预测函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predictClass</span><span class="params">()</span>:</span></span><br><span class="line">    x,y=[],[]</span><br><span class="line">    dataMat = loadDataSet()</span><br><span class="line">    print(len(mat(dataMat)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mat(dataMat))):</span><br><span class="line">        <span class="comment"># 梯度下降算法拟合的最优参数</span></span><br><span class="line">        weights= [<span class="number">0.75401377</span>,<span class="number">-0.2401068</span>,<span class="number">0.15175685</span>,<span class="number">0.64057407</span>,<span class="number">0.93906922</span>]</span><br><span class="line">        z=mat(weights[:<span class="number">-2</span>])*mat(dataMat[i][:<span class="number">-2</span>]).transpose()</span><br><span class="line">        x.append(z)</span><br><span class="line">        h=sigmoid(mat(weights[:<span class="number">-2</span>])*mat(dataMat[i][:<span class="number">-2</span>]).transpose())</span><br><span class="line">        y.append(h)</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scatterClass</span><span class="params">()</span>:</span></span><br><span class="line">    x,y=predictClass()</span><br><span class="line">    plt.scatter(x, y, c=<span class="string">'red'</span>,s=<span class="number">40</span>)</span><br><span class="line">    <span class="comment"># 设置坐标轴的取值范围</span></span><br><span class="line">    plt.axis([<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h3 id="4-3-2-预测结果"><a href="#4-3-2-预测结果" class="headerlink" title="4.3.2 预测结果"></a>4.3.2 预测结果</h3><p>测试可视化过程只选取了梯度下降法得到的前三个最优权值，以此计算预测结果（sigmoid函数值）。</p><p><a href="https://imgchr.com/i/0HUIr6" target="_blank" rel="noopener"><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/10/16/0HUIr6.png" alt=""></a></p><p>鸢尾花测试数据集为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">5.1,3.5,1.4,0.2,Iris-setosa</span><br><span class="line">4.9,3.0,1.4,0.2,Iris-setosa</span><br><span class="line">4.7,3.2,1.3,0.2,Iris-setosa</span><br><span class="line">4.6,3.1,1.5,0.2,Iris-setosa</span><br><span class="line">5.0,3.6,1.4,0.2,Iris-setosa</span><br><span class="line">5.4,3.9,1.7,0.4,Iris-setosa</span><br><span class="line">4.6,3.4,1.4,0.3,Iris-setosa</span><br><span class="line">5.0,3.4,1.5,0.2,Iris-setosa</span><br><span class="line">4.4,2.9,1.4,0.2,Iris-setosa</span><br><span class="line">4.9,3.1,1.5,0.1,Iris-setosa</span><br><span class="line">7.0,3.2,4.7,1.4,Iris-versicolor</span><br><span class="line">6.4,3.2,4.5,1.5,Iris-versicolor</span><br><span class="line">6.9,3.1,4.9,1.5,Iris-versicolor</span><br><span class="line">5.5,2.3,4.0,1.3,Iris-versicolor</span><br><span class="line">6.5,2.8,4.6,1.5,Iris-versicolor</span><br><span class="line">5.7,2.8,4.5,1.3,Iris-versicolor</span><br><span class="line">6.3,3.3,4.7,1.6,Iris-versicolor</span><br><span class="line">4.9,2.4,3.3,1.0,Iris-versicolor</span><br><span class="line">6.6,2.9,4.6,1.3,Iris-versicolor</span><br><span class="line">5.2,2.7,3.9,1.4,Iris-versicolor</span><br></pre></td></tr></table></figure><p>由模型测试图可看出测试结果可辨。</p><h1 id="5-附录"><a href="#5-附录" class="headerlink" title="5.附录"></a>5.附录</h1><p>load_data.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""载入数据集"""</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">path=<span class="string">"iris_train.data"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""读取数据"""</span></span><br><span class="line">    x_data=[]</span><br><span class="line">    y_data=[]</span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f_obj:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f_obj.readlines():</span><br><span class="line">            lineArr=line.strip().split(<span class="string">','</span>)</span><br><span class="line">            lineArr.insert(<span class="number">0</span>,<span class="number">1.0</span>)</span><br><span class="line">            <span class="keyword">if</span> (lineArr[<span class="number">-1</span>]==<span class="string">'Iris-setosa'</span>):</span><br><span class="line">                y_data.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span>(lineArr[<span class="number">-1</span>]==<span class="string">'Iris-versicolor'</span>):</span><br><span class="line">                y_data.append(<span class="number">1</span>)</span><br><span class="line">            x_data.append(list(map(float, lineArr[:<span class="number">-1</span>])))</span><br><span class="line">        <span class="keyword">return</span> x_data,y_data</span><br></pre></td></tr></table></figure><p>sigmoid.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#定义sigmoid函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br></pre></td></tr></table></figure><p>gradascent.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sigmoid <span class="keyword">import</span> sigmoid</span><br><span class="line"><span class="keyword">from</span> load_data <span class="keyword">import</span> loadDataSet</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradAscent</span><span class="params">(dataMatIn, classLabels)</span>:</span></span><br><span class="line">    dataMatrix = mat(dataMatIn)  <span class="comment"># 转换为矩阵</span></span><br><span class="line">    labelMat = mat(classLabels).transpose()  <span class="comment"># 转换为矩阵</span></span><br><span class="line"></span><br><span class="line">    m, n = shape(dataMatrix)</span><br><span class="line">    alpha = <span class="number">0.001</span>   <span class="comment"># 学习率</span></span><br><span class="line">    maxCycles = <span class="number">505</span>   <span class="comment"># 迭代次数</span></span><br><span class="line">    weights = ones((n, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(maxCycles):  <span class="comment"># 迭代拟合参数</span></span><br><span class="line">        h = sigmoid(dataMatrix * weights)  <span class="comment"># 求h</span></span><br><span class="line">        error = (h - labelMat)    <span class="comment"># 求误差量</span></span><br><span class="line">        weights=weights-alpha*dataMatrix.transpose()*error/len(dataMatrix)</span><br><span class="line">    <span class="keyword">return</span> weights</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">()</span>:</span></span><br><span class="line">    dataMat, labelMat = loadDataSet()</span><br><span class="line">    weights = gradAscent(dataMat, labelMat)</span><br><span class="line">    print(weights)</span><br><span class="line">    plotBestFit(weights)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plotBestFit</span><span class="params">(weights)</span>:</span></span><br><span class="line">    dataMat, labelMat = loadDataSet()</span><br><span class="line">    dataArr = array(dataMat)</span><br><span class="line">    n = shape(dataArr)[<span class="number">0</span>]</span><br><span class="line">    xcord1,xcord2 = [],[]</span><br><span class="line">    ycord1,ycord2 = [],[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> int(labelMat[i]) == <span class="number">1</span>:</span><br><span class="line">            xcord1.append(dataArr[i, <span class="number">1</span>])</span><br><span class="line">            ycord1.append(dataArr[i, <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            xcord2.append(dataArr[i, <span class="number">1</span>])</span><br><span class="line">            ycord2.append(dataArr[i, <span class="number">2</span>])</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax.scatter(xcord1, ycord1, s=<span class="number">30</span>, c=<span class="string">'red'</span>, marker=<span class="string">'s'</span>)</span><br><span class="line">    ax.scatter(xcord2, ycord2, s=<span class="number">30</span>, c=<span class="string">'green'</span>)</span><br><span class="line">    x = arange(<span class="number">3.0</span>, <span class="number">8.0</span>, <span class="number">0.1</span>)</span><br><span class="line">    y = (-(float)(weights[<span class="number">0</span>][<span class="number">0</span>]) - (float)(weights[<span class="number">1</span>][<span class="number">0</span>]) * x) / (float)(weights[<span class="number">2</span>][<span class="number">0</span>])</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    plt.title(<span class="string">'Iris data set classification'</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Sepal length'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Sepal width'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    GetResult()</span><br></pre></td></tr></table></figure><p>predice_classfication.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sigmoid <span class="keyword">import</span> sigmoid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">path=<span class="string">"iris_test.data"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""读取数据"""</span></span><br><span class="line">    x_data=[]</span><br><span class="line">    <span class="keyword">with</span> open(path) <span class="keyword">as</span> f_obj:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f_obj.readlines():</span><br><span class="line">            lineArr=line.strip().split(<span class="string">','</span>)</span><br><span class="line">            lineArr.insert(<span class="number">0</span>,<span class="number">1.0</span>)</span><br><span class="line">            x_data.append(list(map(float, lineArr[:<span class="number">-1</span>])))</span><br><span class="line">        <span class="keyword">return</span> x_data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predictClass</span><span class="params">()</span>:</span></span><br><span class="line">    x,y=[],[]</span><br><span class="line">    dataMat = loadDataSet()</span><br><span class="line">    print(len(mat(dataMat)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(mat(dataMat))):</span><br><span class="line">        weights= [<span class="number">0.75401377</span>,<span class="number">-0.2401068</span>,<span class="number">0.15175685</span>,<span class="number">0.64057407</span>,<span class="number">0.93906922</span>]</span><br><span class="line">        print(<span class="string">'z'</span>,mat(weights[:<span class="number">-2</span>])*mat(dataMat[i][:<span class="number">-2</span>]).transpose())</span><br><span class="line">        z=mat(weights[:<span class="number">-2</span>])*mat(dataMat[i][:<span class="number">-2</span>]).transpose()</span><br><span class="line">        x.append(z)</span><br><span class="line">        h=sigmoid(mat(weights[:<span class="number">-2</span>])*mat(dataMat[i][:<span class="number">-2</span>]).transpose())</span><br><span class="line">        y.append(h)</span><br><span class="line">        print(<span class="string">'h'</span>,h)</span><br><span class="line">    <span class="keyword">return</span> x,y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scatterClass</span><span class="params">()</span>:</span></span><br><span class="line">    x,y=predictClass()</span><br><span class="line">    plt.scatter(x, y, c=<span class="string">'red'</span>,s=<span class="number">40</span>)</span><br><span class="line">    <span class="comment"># 设置坐标轴的取值范围</span></span><br><span class="line">    plt.axis([<span class="number">-0.75</span>, <span class="number">0.75</span>, <span class="number">0.2</span>, <span class="number">0.8</span>])</span><br><span class="line">    plt.title(<span class="string">'Iris data set prediction'</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Z'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Sigmoid'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    predictClass()</span><br><span class="line">    scatterClass()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Machine-Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据可视化——函数图像绘制</title>
      <link href="/2020/10/09/Python-data-visualization/"/>
      <url>/2020/10/09/Python-data-visualization/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>利用python的matplotlib库进行数据可视化，绘制定义函数的图像。</p><p>以机器学习逻辑回归的sigmoid函数为例：</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;z&space;\right&space;)=\frac{1}{1&plus;e^{-z}}" target="_blank"><img src="/loading.gif" data-original="https://latex.codecogs.com/gif.latex?g\left&space;(&space;z&space;\right&space;)=\frac{1}{1&plus;e^{-z}}" title="g\left ( z \right )=\frac{1}{1+e^{-z}}" /></a></p><p>python代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义sigmoid函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br></pre></td></tr></table></figure><a id="more"></a><p>函数图像为：</p><p><img src="/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wnxy/wnxy_pic@master/img/sigmoid.png" alt=""></p><p>以下对python matplotlib库绘制函数图像做简单描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义sigmoid函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-z))</span><br><span class="line"></span><br><span class="line"><span class="comment">#在-10到10之间生成1000个x值</span></span><br><span class="line">x=np.linspace(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line">y=sigmoid(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取当前的坐标轴, gca = get current axis</span></span><br><span class="line">ax=plt.gca()</span><br><span class="line"><span class="comment">#设置右边框和上边框</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"><span class="comment">#设置x坐标轴为下边框</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line"><span class="comment">#设置y坐标轴为左边框</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line"><span class="comment">#设置x轴, y周在(0, 0)的位置</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> Machine-Learning </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> 函数图像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo melody博客不蒜子统计无法显示问题解决</title>
      <link href="/2020/09/19/Hexo-melody-blog-beautification1/"/>
      <url>/2020/09/19/Hexo-melody-blog-beautification1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>参考文章：<a href="https://www.jianshu.com/p/0befb34dce16" target="_blank" rel="noopener">https://www.jianshu.com/p/0befb34dce16</a></p><p>存在问题：已发布的hexo melody主题博客不蒜子统计不能显示</p><p>解决：修改\themes\melody\layout\includes\count路径下busuanzi.pug文件</p><a id="more"></a><p>原文件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.busuanzi</span><br><span class="line">  script(async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;)</span><br><span class="line">  if(!is_post())</span><br><span class="line">    if(theme.busuanzi.site_uv)</span><br><span class="line">      span#busuanzi_container_site_uv!&#x3D; theme.busuanzi.site_uv_header         &lt;----改</span><br><span class="line">        span#busuanzi_value_site_uv</span><br><span class="line">        span!&#x3D;theme.busuanzi.site_uv_footer</span><br><span class="line">    if(theme.busuanzi.site_pv)</span><br><span class="line">      if(theme.busuanzi.site_pv)</span><br><span class="line">        span.footer-separator |</span><br><span class="line">      span#busuanzi_container_site_pv!&#x3D; theme.busuanzi.site_pv_header         &lt;----改</span><br><span class="line">        span#busuanzi_value_site_pv</span><br><span class="line">        span!&#x3D;theme.busuanzi.site_pv_footer</span><br><span class="line">  else</span><br><span class="line">    if(theme.busuanzi.page_pv)</span><br><span class="line">      span#busuanzi_container_page_pv!&#x3D; theme.busuanzi.page_pv_header         &lt;----改</span><br><span class="line">        span#busuanzi_value_page_pv</span><br><span class="line">        span!&#x3D;theme.busuanzi.page_pv_footer</span><br><span class="line">    else</span><br><span class="line">      if(theme.busuanzi.site_uv)</span><br><span class="line">        span#busuanzi_container_site_uv!&#x3D; theme.busuanzi.site_uv_header       &lt;----改</span><br><span class="line">          span#busuanzi_value_site_uv</span><br><span class="line">          span!&#x3D;theme.busuanzi.site_uv_footer</span><br><span class="line">      if(theme.busuanzi.site_pv)</span><br><span class="line">        if(theme.busuanzi.site_pv)</span><br><span class="line">          span.footer-separator |</span><br><span class="line">        span#busuanzi_container_site_pv!&#x3D; theme.busuanzi.site_pv_header       &lt;----改</span><br><span class="line">          span#busuanzi_value_site_pv</span><br><span class="line">          span!&#x3D;theme.busuanzi.site_pv_footer</span><br></pre></td></tr></table></figure><p>修改后文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.busuanzi</span><br><span class="line">  script(async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;)</span><br><span class="line">  if(!is_post())</span><br><span class="line">    if(theme.busuanzi.site_uv)</span><br><span class="line">      span!&#x3D; theme.busuanzi.site_uv_header</span><br><span class="line">        span#busuanzi_value_site_uv</span><br><span class="line">        span!&#x3D;theme.busuanzi.site_uv_footer</span><br><span class="line">    if(theme.busuanzi.site_pv)</span><br><span class="line">      if(theme.busuanzi.site_pv)</span><br><span class="line">        span.footer-separator |</span><br><span class="line">      span!&#x3D; theme.busuanzi.site_pv_header</span><br><span class="line">        span#busuanzi_value_site_pv</span><br><span class="line">        span!&#x3D;theme.busuanzi.site_pv_footer</span><br><span class="line">  else</span><br><span class="line">    if(theme.busuanzi.page_pv)</span><br><span class="line">      span!&#x3D; theme.busuanzi.page_pv_header</span><br><span class="line">        span#busuanzi_value_page_pv</span><br><span class="line">        span!&#x3D;theme.busuanzi.page_pv_footer</span><br><span class="line">    else</span><br><span class="line">      if(theme.busuanzi.site_uv)</span><br><span class="line">        span!&#x3D; theme.busuanzi.site_uv_header</span><br><span class="line">          span#busuanzi_value_site_uv</span><br><span class="line">          span!&#x3D;theme.busuanzi.site_uv_footer</span><br><span class="line">      if(theme.busuanzi.site_pv)</span><br><span class="line">        if(theme.busuanzi.site_pv)</span><br><span class="line">          span.footer-separator |</span><br><span class="line">        span!&#x3D; theme.busuanzi.site_pv_header</span><br><span class="line">          span#busuanzi_value_site_pv</span><br><span class="line">          span!&#x3D;theme.busuanzi.site_pv_footer</span><br></pre></td></tr></table></figure><p>修改后不蒜子显示正常。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> melody </tag>
            
            <tag> 博客美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星光不负赶路人...</title>
      <link href="/2020/08/11/Starlight-lives-up-to-the-traveler/"/>
      <url>/2020/08/11/Starlight-lives-up-to-the-traveler/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="041166ff4c12570141e825e24b8f1037ad570f6b0dbb39a24673ca7d1b8e2178">d0d703fa332139beb12ceb85f23df7fc2dd2ad6c1e2d88c79a07ca82a4c752383c4b274b70abf24c2627b91511ca38c6827a85fb24bb1d405ef366f63d449475cc7e7021b2f42aea7973805ef690a099be12a8caa2ffdf6dbc9f6212144592fad5a584f16d9cbcc534663cce7d13c5205693b5799467cdca4f31b1eb3da117c4464e9d65e8d2ea086423bfac557b55b88f807ccf0b25016324b2051db850900f99f12708a26a6549e44778d76c46ce31d1a6d64c5e9d8db63da0630457acc014c67941c9a3f8ca646afc155801e88b3509b175e7ac010b442778b88935322dc16758351f90281084ecfd1b06f21cb5a1c4e1255c460c67ea328840963b1ad7b1f852cafe5fdc6953ede3c0673d806bfa3992f6dd31de32c90c355e64e61f782a01dd4ec9754b3e58ce682d7ebafa8936892e07cc0e9ad798833c0cef755a13e67ad45bb2fe8786847e49cd7f05b40f337d3fa9e88d4a34a1b40f82dbaf94cca5a1e56745f5d7142fd61df013d5559425344050fa67e0d3b8063cd0fca30baaa9953891ba1fb89a1c6bca41865c52fe33c02abb579bf67cbb95937dd057cc086349c1477d3b9afdc4f684a1fb23e181bca72b825f582f1e38c37cc156e788bb623f2a7d451e18ac030fa0c04cbd2b28a472519ff52826d31d4a013a00910a82a6432aca1d25277880315953a0b34158427562c6804989f1a32271460b6660c99bba95445298cc42709d2a56c12bfdf4c0faaea1588fb134f69f65935a5e0c6b1fc3518140bb26c35b9eb599fe47ebc63a9404b21daa7f89931e259baf01b7e5256c5450a57c29ce4a7ea7e457108666e8cf001800e44b04608d62c1ac06b4b4d5c1edb1b3aff8e74249fff98c699f8f9e8c998368a557c38c07584c809205c8138a91b6f774bf15582315a60e43736f7576da3f45e598c92f5292cedc7bee97c12c1c12e5b1b1f8e479f50b995ae13780a9e92b521165ce912519184d5c2642ed329d2c45dac2b0d90279103026deaa18b6d09c5553948bd70f892d9dcd04342f6cde9c9afa36c0fd3c852ae8f4386f49f12d8d20b72e80ebb7298bb440e67334e00a3c6b5d2ae9e4086906e8266a4732e6d6e9b38293d4ff9fc4df6fe4d72333d7faf76b8fc9cf2bfd2df68297b3dc9faeb46d52225b8477b45cdd1c58379b78fa2dceef18862ad6437942384d0257d070dca81740ba87f33fad03b7493cbbc159158406cecad04d0668ce8e21557b43e7d49d17f6c3c3636a4fd52ae0809666845a961f7bec20db60fc8e53ca4c508af57b58c242cde427bbf815cc36ad851a7eaad5ab7487bdd941da4ecb969dc7ec1689efb832e0ba990e2e7da29a9289cf093c9492978980bcebbf56a1ae6e402886b4ab7c8e97098655c0c607ca68af147e73cd337891a589f616f71a45cfce865d4c4ffe7dd7d5fddcfdb65059ddbbb27ff431cdb0f42833aae158e126a3886d57161fc24194f3d10a9470a04f76092c33ef060d2a72051d475a61fff2677e85a2b393399e795f287716f9e97228bbb14406c2eb7d904d6c05e90d6f7db9db768c7e2f9e84070e1aad55a34d6ca41538855c0493ac397cff052ba74c9752fb05f0026ed29711c5f18e85853b37f4cc3045338258e62b16dec88503353faf2a023244516c299dd8a696d58554c25f1e9f8d1a021a5550c73d0ebfadf1d4c5f60adadc95fa219e3ef8169f517a8e2988e8d9480da31dcdbcb3b414e4b55b2091ffb2c3079977a535de96e77562664f5d9ae8ddea1282e12f4c3d357fadb3a971588e9221d153ee8a0427920e21c810964bfce016d91c15fc4329eff47521e3159f96acd9e872b480cca17829e991979a3f8ea613a4f6935ae72bc7de3b154af2ac9eac970891f6ee4406dbb7a812044bf8455f7744805459c25698ba1c27cc0534ca85e502f147e1c0a266a5de64a3a20504230868188d86a7077dd7f8db289e1b722f5fcc39b41fddec8366061d06511dfdf939b23b944001b1167dae5b795292c03f686a3dc9dcdfcffc71dc35d12106735c5ff2ee3c447d97d6e0c883b06fab2ce76ca1953c6b5439b69f4fc3d6744fbe4fbb9b65fa05c1c27546cab816a617562057bec889979b53a72c0ebcf5b4f330054eeb7b4dc5e87b4ce959413794844bf0ab020e517fe241bd53a3be51181c72c39436e328484c3b6923c98031d889273af786fb6fca29fb5e6a4fc4ea25c98f94c4412a3e4e173a7b05772d1facdf0804b9e4261e79c71e3cfe468bc3072061530d405f1f3c4f0931b7632337304731d0df617732d1c803a663ba80e9462823b0e6243d4439abe0bbde13fbe1d671b6662f58ec2b3776ac454cf2cbb6582f46c4ad6cef499f91a3696ce6a764c83aca0daa1851265bbf71b4005939bd587ecf3c10c2cc7f87630138b13696a437de48aa63b83b69a7ee070444a2c87616450ea2e3a7f49aae14fb4c88ddee2fee213e77d8c7b25cdfa9a24dbbdc0574a10e7cb3d26bb1d692bc5bec27811a1594f7588b85fed273afbf9a019e6ca7cd1f17434d1f0e7c37f6d17ed85b779c34083aadb6a14d9b83bc6a41d2548ba6195b10310eff31afa17e6c6b0cbefa0fbce570624296d118ac491310ad9bfb31c4fa273a9a1c0b3fbfd5127b7c0e79177441ecac05ee58465f68a88ed82b422b252c2c74242718d84ac88ec08addf6af7588eb6fd7855ab9813d76941ff98df72cb0018f301a0000b09ba8ef3540444b7a08f6a85ce1885e28c0c4c42be1b1f593a7c6b3a9d60443187af13dba92356586abaa077e936867bbffd5f99d9070e6a5e4eebe329d7796b210b139b6243f70e4758b670f7656146b09c353c23de41626fcf9e0dc04893928a26c4415dc92c89d14eeae985a77603f29e92a2f64c3a4511f37c6810a6165eb70a6644b31cadf1f3aab8c90906626a9b907f5f81b31e8885442f224b3e477369e8630e9c5c6736cc3bf069cb6d09a55ba15f5f8a410d162e9899a7ae305c4e2f89fc9627eeae4e51fea6b1c4052ecf554506fc403464f1393050bf09bdec91c30f82caa0ee124b21f1f647d37a372f89f2f1e3b448f75a5755d455cf52c9422fff68a114c64c252831ca49839117b63dd5f0a148703faffdd43ddfe0053a7b1170ae42be4563fa110ce8642cafebc712a4c3e6a370ee8ac4c0114ebfc70b13ffd63e35840d47ddf9d2eacf1dfc05c38c36374a7bf7b6d0f81251a00b4a6950d9a604934782a14c2f4e57db11d780174abc28a4f073d6cc42adb164b46771fd2d1532ef8348548b0741fdc7a30ad38aec863f4c4fdeed4f8b51677d67ccb67e0469d6fc400b9bdf41bd47332a66db77c70ccbed3f96c671fd7657ad084e14e69405d344378a5f81385f4626158bd0d5f2c63b0df9d20b97b72b0616f7bc039aadcaf1d1142d2a2bb1a64c76d7815a270f006760ac65d523316e805f9c4d9028cc7f882377ab9e4e1a77981ea6703ab4fd00a4519e3ad0405d0944ec5fc8385bd2dc52dc615f36f6190f18faf867109d6fc8fddcae1924ea463af50efd905cf1d1f2f394151ad904e46ee6f03f8c14a294e1848190797d8fd3daf70f41eee0ee224d96ab6dead4af929500cb9e808b63b543c38171c0c6fa5c3646f6c2343bcb28e35f329557efcef2095c0b25a1f8199fefbfbc16e26ba23c51f0481a2975b6749b02ce6245e2ee6d668c1ee2b9b2b0d66268fd002c9793a7fd5558afde5113321eb00cd7a6dfa98a8ba9dad4eb74e406eed6e13f0b56964437f3f0383193f0522118457420bd2c8bf3d3a1b31010adff8237f1999e9053688bf5796403ff331cd94387ad3e7897aa3eced58da39a05e162ed3b3af4eaeb4cec6dcbd4ce5847d303f30c27b3e2b57c4cc65aac8474e23846fd9b7e4514122a9ac19dca922467feeb3b50a074f8fc1542ec9a79d8da0e1a47ee3ade2ae473ea295688c81dbab7a9ab34e0467a710aca232a40e04d6872fa2d675438751cf1fe888d6b48a3fcf3477142ccfe4adacffcd415a21d832b836198114b318eb86878f58c6bd0a8728b72d611d5b64013b31a9b814b4ac59cebe55bcc8902f048b81ac06fe049e272253d574881a448fcda568364ba643fc33d89dae6583ceb7c149b3c946a3c2513e06da4c8e9d948d210494c611a1c68020fc52b51c53430e0e6e838066b5d8d9c40557c5df2a04a4e60ff17e14c0dc0e97a04d2217cf85821f3ad194a1ae907e7335ddf37d823b50fc8cdebc8303adb3a4c6033119458a1eb539a7cd897ee02557a99d999ad5d9e2249d19c6a3edb85583c8bb5f2d3dab59bc65436e2b1bee6e305ef662b1b94d91c16ace8b</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莞尔日记 </tag>
            
            <tag> 考研 </tag>
            
            <tag> rain杂货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github-readme-stats制作个性GitHub简介page</title>
      <link href="/2020/07/20/github-readme-stats-Make-a-personalized-GitHub-profile-page/"/>
      <url>/2020/07/20/github-readme-stats-Make-a-personalized-GitHub-profile-page/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在GitHub创建一个跟用户名一样的项目，最终会在自己的GitHub首页生成一个个性介绍板块。</p><blockquote><p>You found a secret! <strong>nxyrain/nxyrain</strong>is a ✨<em>special</em> ✨ repository that you can use to add a <code>README.md</code> to your GitHub profile. Make sure it’s public and initialize it with a <strong>README</strong> to get started.</p></blockquote><a id="more"></a><h3 id="一、创建项目"><a href="#一、创建项目" class="headerlink" title="一、创建项目"></a>一、创建项目</h3><p><a href="https://imgchr.com/i/UfzoAx" target="_blank" rel="noopener"><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UfzoAx.md.png" alt="创建项目"></a></p><p><strong>注意：</strong></p><p><strong>1、项目名和用户名要一致。</strong></p><p><strong>2、项目要公开，勾选Public。</strong></p><p><strong>3、项目需要初始化，勾选创建README。</strong></p><p>个人首页最上面就出现了个性介绍板块。</p><p><a href="https://imgchr.com/i/UhC2I1" target="_blank" rel="noopener"><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UhC2I1.md.png" alt="Hi there"></a></p><h3 id="二、编辑个性介绍板块"><a href="#二、编辑个性介绍板块" class="headerlink" title="二、编辑个性介绍板块"></a>二、编辑个性介绍板块</h3><p><a href="https://imgchr.com/i/UhFGrD" target="_blank" rel="noopener"><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UhFGrD.md.png" alt=""></a></p><p>添加内容</p><p><a href="https://imgchr.com/i/UhknOS" target="_blank" rel="noopener"><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UhknOS.md.png" alt=""></a></p><p>README支持Markdown语法，编辑完成点击Preview Changes预览编辑效果，编辑完成提交修改即可看见个性介绍页效果。</p><p>最后，安利一个GitHub Readme Stats项目，用来在你的 README 中 获取动态生成的GitHub统计信息！<a href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="noopener">项目地址</a></p><p>实现效果：</p><p><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UhEmVg.png" alt=""></p><p><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UhEu5j.png" alt=""></p><p><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/07/20/UhEnaQ.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业季——大学路1号的时光</title>
      <link href="/2020/06/22/Graduation-season-Time-at-No.1-University-Road/"/>
      <url>/2020/06/22/Graduation-season-Time-at-No.1-University-Road/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a9009c374d4b7cfb1d66a661a08dea589685c97ea8d62e599fb0b1c5ef40fe7c">d0d703fa332139beb12ceb85f23df7fc2dd2ad6c1e2d88c79a07ca82a4c752383c4b274b70abf24c2627b91511ca38c6827a85fb24bb1d405ef366f63d449475cc7e7021b2f42aea7973805ef690a099be12a8caa2ffdf6dbc9f6212144592fad5a584f16d9cbcc534663cce7d13c5205693b5799467cdca4f31b1eb3da117c4464e9d65e8d2ea086423bfac557b55b88f807ccf0b25016324b2051db850900f99f12708a26a6549e44778d76c46ce31d1a6d64c5e9d8db63da0630457acc014c67941c9a3f8ca646afc155801e88b3509b175e7ac010b442778b88935322dc16758351f90281084ecfd1b06f21cb5a1c4e1255c460c67ea328840963b1ad7b1f852cafe5fdc6953ede3c0673d806bfa009d3f5d6a00029084c1de6625e741a784f379c02f0721a131959f1754ef211784435f41555f56afffad6533146505632b14f921d8750f0e4c7c1c00230d7bf628979ea09ed966d3eb55372d38ff3bf805c1c77805ec55aba2a2aeb328eda1fe8b8169f03e8b9a67f46a326a164afca24fc5e4f68331ae95c4ace625a9715501c1f198e83f5a061c903b49d1b720ebd326b3fe72c0a073b053ba765a89d24dc176f1197e14d1acc1edbae8a2adceaf26af7f71d43eed341e7fabc01247053c938587d7882cc4f4d2312f08d6c1d3856ae6b39dd68e8a3b12db06d3f57467ef61ad68acd01050cfe046ad60a33908dc4904aff04670232a78751cf9607065641672daa569e559928628f784eb84fba585ba639dcee4ff4d2f17fb4aef454bfc4606bc37babe88146bb8d166260ab698a30c7370fa34c4cd9245872ca0276c2a1ecb235a19365668cfdc764907a1fc9337abd11e735c6ae36493d751da296cebaf47bd83dcd6d9d3e1698088b7bfafb1dde530cbdaec0ef7e395981db0ac70f38d9b93c0ea9235909716ebae4618fb20641f81a1709157837ce2062fbc60968004573d7e254edb23d7ad1540d8269d7ca1abef74fc6c257b73d3a031c15ec2ccbd66cb55a8eb7d8beb2dc712cb5e2a6f01420ce6b899e465e8a1336acce4304fda944a9e55f59d4a50786c3350dea77cf6fb6962eecea5d0b17e314ca50100e0da1b217d0d9fbe163fc1bb2c90697b4fdb0ec645efcf45d0f534d779a712f8d6503ac27c44783ef95a247944997e91efb1f74272e55d4ebab9e67333a64843f1081cd1dde55291d48d2632dfeb02aa30bd0ad4b9995d27496b12a7934a2907f635d8e847bb0f828cdfdfae317267d8f3d7d2efd4ed9c99c064d49778ede73d5aa93335110746f4e2acca0c0287e6fe9492060dcf7dccc1cec632cf3318ea4c410a198d24a71893d0ab57c105b268f2f5dd1cfc63bd52fdd54ae1ecd0c333e6f7554d5bc3bd9d6cefd4316954e9d142c398ff4b087609b2d154a5821df49cc15ad61b43660529fc4b2ebc2d4360d31636bf82b375820a4dcec56fcbca7f2daccf7581f37607856a5b6cefd54402a9d279b9e7a26e5298ede8df2d4c5c40ddcc9825b3d98ee7384d243bfb7e78796cb090635f38e406ce270998a698c8d43e21a9a6a9407a7a9f2e3d0c6de171b49876fdf1c848ae2d2f427c098a47e1fbbdac89f0cfdee868dc6c02f7b8462753fa245184245faee85f857c201b24b8704ec07328644f0377982ab9f01db118ec24d01a33e8977b417077daa07a8ae0ecee51500cb2b590cfccefee8b4c77e1f314aaabf5597290ae0d8d384e38c107502f8d5aad</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莞尔日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>要毕业了</title>
      <link href="/2020/05/30/School-celebration/"/>
      <url>/2020/05/30/School-celebration/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="04022c98e28eb804d78d6977517d525189fd6f278d9eba6271e33bc3795648a6">d0d703fa332139beb12ceb85f23df7fc2dd2ad6c1e2d88c79a07ca82a4c752383c4b274b70abf24c2627b91511ca38c6827a85fb24bb1d405ef366f63d449475cc7e7021b2f42aea7973805ef690a099be12a8caa2ffdf6dbc9f6212144592fad5a584f16d9cbcc534663cce7d13c5205693b5799467cdca4f31b1eb3da117c4464e9d65e8d2ea086423bfac557b55b88f807ccf0b25016324b2051db850900f99f12708a26a6549e44778d76c46ce31d1a6d64c5e9d8db63da0630457acc014c67941c9a3f8ca646afc155801e88b3509b175e7ac010b442778b88935322dc16758351f90281084ecfd1b06f21cb5a1c4e1255c460c67ea328840963b1ad7b1f852cafe5fdc6953ede3c0673d806bfab465055b76af0e55bfe15eea492ea750f9a0a07e1f42b385e4284b5c65df12f42604da7fab383df45f251f283e52995def43ebd728f6f41974639c9fd13d56ff246f847dbe18edb14c3416549ecd240c36fc7171724f671ff0c674be23902d3afff100a1a5cbd1e50a86512065b5bb8f74259b7ddd119983283ef678bb214d79937fb73c4ec90a09ac2e344eb4349b176b010dbd2ccd3b9361c981c69e072a00b46092b1b7cc4137d0ba09bf4810a9d678d3c124114184ad2f97060ce8f2073d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莞尔日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++二维数组参数传递</title>
      <link href="/2020/05/01/C-or-C++_two-dimensional-array-parameter-transfer/"/>
      <url>/2020/05/01/C-or-C++_two-dimensional-array-parameter-transfer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="C-C-语言中二维数组参数传递常用三种方法："><a href="#C-C-语言中二维数组参数传递常用三种方法：" class="headerlink" title="C/C++语言中二维数组参数传递常用三种方法："></a>C/C++语言中二维数组参数传递常用三种方法：</h3><ul><li><p>方法一：形参为二维数组并给出第二维的大小</p><p>如：<code>void sum(int a[][3])</code></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">3</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">s += a[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line">sum(b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二：形参为指向数组的指针并给出数组的长度</p><p>如：<code>void sum(int (*a)[3])</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span>(*a)[<span class="number">3</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">s += a[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三：形参为指针的指针且实参必须为指针，而不能是数组名</p><p>如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> **a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">s += a[<span class="number">0</span>][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *a[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;;</span><br><span class="line">a[<span class="number">0</span>] = b[<span class="number">0</span>];</span><br><span class="line">a[<span class="number">1</span>] = b[<span class="number">1</span>];</span><br><span class="line">sum(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 二维数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车辆轨迹追踪系统开发文档</title>
      <link href="/2020/04/29/Development-document-of-vehicle-trajectory-tracking-system/"/>
      <url>/2020/04/29/Development-document-of-vehicle-trajectory-tracking-system/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>车辆大规模GPS数据采集预处理系统</p><p>终端管理API接口：</p><div class="table-container"><table><thead><tr><th>模块</th><th>接口名称</th><th>功能说明</th></tr></thead><tbody><tr><td>entity</td><td>add</td><td>创建entity</td></tr><tr><td></td><td>update</td><td>更新entity</td></tr><tr><td></td><td>delete</td><td>删除entity</td></tr><tr><td></td><td>list</td><td>检索符合过滤条件的entity，返回entity属性信息和最新位置，可用于列出entity，也可用于批量查询多个entity的位置。</td></tr></tbody></table></div><p>API接口总览：<a href="http://lbsyun.baidu.com/index.php?title=yingyan/api/v3/entity" target="_blank" rel="noopener">http://lbsyun.baidu.com/index.php?title=yingyan/api/v3/entity</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用——括号匹配</title>
      <link href="/2020/03/27/Stack-application-bracket-matching/"/>
      <url>/2020/03/27/Stack-application-bracket-matching/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目描述：编写程序，判定给定表达式中的括号是否匹配，表达式中的合法括号位 “(”，“)”，“[”，“]”，“{”，“}”，括号可按任意次序嵌套使用。</p><p>输入说明：有多个表达式，出入数据第一行是表达式的数目，每个表达式占一行。</p><p>输出说明：对每个表达式，若其括号匹配则输出“Yes”，否则输出“No”。</p><a id="more"></a><p>C++实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ch[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'('</span> || ch[i] == <span class="string">'['</span> || ch[i] == <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.push(ch[i]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">')'</span>&amp;&amp;s.top() == <span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">']'</span>&amp;&amp;s.top() == <span class="string">'['</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'&#125;'</span>&amp;&amp;s.top() == <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">')'</span>&amp;&amp;s.top() != <span class="string">'('</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">']'</span>&amp;&amp;s.top() != <span class="string">'['</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'&#125;'</span>&amp;&amp;s.top() != <span class="string">'&#123;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">')'</span> || ch[i] == <span class="string">']'</span> || ch[i] == <span class="string">'&#125;'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/<em>——测试用例——</em>/<br>/<em><br>[(d+f)</em>{}]<br>[(2+3)]<br>()}<br>[4(6]7)9<br>*/</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 栈 </tag>
            
            <tag> 括号匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列的定义与使用</title>
      <link href="/2020/03/26/Definition-and-use-of-stacks-and-queues/"/>
      <url>/2020/03/26/Definition-and-use-of-stacks-and-queues/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>栈（Stack）：只允许在一端进行插入或删除操作的线性表。</p><p>队列（Queue）：只允许在表的一端进行插入，而在表的另一端进行删除的线性表。</p><p>栈的基本操作：</p><p><code>s.empty()               若栈为空返回true，否则返回false</code><br><code>s.size()                   返回栈中元素的个数</code><br><code>s.pop()                   弹出栈顶元素但不返回其值</code><br><code>s.top()                    若栈s非空，返回栈顶的元素</code><br><code>s.push()                 在栈顶压入新元素</code></p><a id="more"></a><p>队列的基本操作：</p><p><code>q.empty()               若队列为空返回true，否则返回false</code><br><code>q.size()                   返回队列中元素的个数</code><br><code>q.pop()                    弹出队列首元素但不返回其值</code><br><code>q.front()                   返回队首元素的值，但不删除该元素</code><br><code>q.push()                  在队尾压入新元素</code><br><code>q.back()                  返回队列尾元素的值，但不删除该元素</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入头文件：</p><p><code>#include&lt;stack&gt;</code></p><p><code>#include&lt;queue&gt;</code></p><p>定义栈：<code>stack&lt;int&gt; s;</code></p><p>定义队列：<code>queue&lt;int&gt; q;</code></p><p>举例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;<span class="comment">//定义一个栈  </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">s.push(i);</span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"栈内的元素的个数为："</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/tham_/article/details/44733101" target="_blank" rel="noopener">更多参考</a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树构建与遍历——前序和中序或中序和后序确定二叉树</title>
      <link href="/2020/03/25/Bitree-construction-and-traversal/"/>
      <url>/2020/03/25/Bitree-construction-and-traversal/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="二叉树测试用例："><a href="#二叉树测试用例：" class="headerlink" title="二叉树测试用例："></a>二叉树测试用例：</h3><p><img src="/loading.gif" data-original="https://s1.ax1x.com/2020/04/04/GdqXuD.png" alt="二叉树"></p><p>preOrder: ABDGCEFH<br>inOrder: DGBAECHF<br>postOrder: GDBEHFCA</p><ol><li>已知二叉树前序遍历序列和中序遍历序列可以确定一颗二叉树。</li><li>已知二叉树中序遍历序列和后序遍历序列可以确定一颗二叉树。</li><li><u>已知二叉树前序遍历序列和后序遍历序列不能确定一颗二叉树。</u></li></ol><h3 id="已知二叉树前序和中序遍历序列，构造二叉树，C-实现："><a href="#已知二叉树前序和中序遍历序列，构造二叉树，C-实现：" class="headerlink" title="已知二叉树前序和中序遍历序列，构造二叉树，C++实现："></a>已知二叉树前序和中序遍历序列，构造二叉树，C++实现：</h3><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树结点定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> value;</span><br><span class="line">node *lchild;</span><br><span class="line">node *rchild;</span><br><span class="line">node(<span class="keyword">char</span> ch) &#123;</span><br><span class="line">value = ch;</span><br><span class="line">lchild = <span class="literal">NULL</span>;</span><br><span class="line">rchild = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 二叉树前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;value;</span><br><span class="line">preOrder(root-&gt;lchild);</span><br><span class="line">preOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 二叉树中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line">inOrder(root-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;value;</span><br><span class="line">inOrder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归 二叉树后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root)</span><br><span class="line">&#123;</span><br><span class="line">postOrder(root-&gt;lchild);</span><br><span class="line">postOrder(root-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">buildBitree</span><span class="params">(<span class="built_in">string</span> pre, <span class="built_in">string</span> in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = pre.length();</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">node *root = <span class="keyword">new</span> node(pre[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> n = in.<span class="built_in">find</span>(pre[<span class="number">0</span>]);</span><br><span class="line">root-&gt;lchild = buildBitree(pre.substr(<span class="number">1</span>, n), in.substr(<span class="number">0</span>, n));</span><br><span class="line">root-&gt;rchild = buildBitree(pre.substr(n + <span class="number">1</span>, len - n - <span class="number">1</span>), in.substr(n + <span class="number">1</span>, len - n - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> pre[<span class="number">100</span>], in[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; pre &gt;&gt; in)</span><br><span class="line">&#123;</span><br><span class="line">node *root = buildBitree(pre, in);</span><br><span class="line">postOrder(root);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//inOrder(root);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//preOrder(root);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="已知二叉树中序和后序遍历序列，构造二叉树，C-实现："><a href="#已知二叉树中序和后序遍历序列，构造二叉树，C-实现：" class="headerlink" title="已知二叉树中序和后序遍历序列，构造二叉树，C++实现："></a>已知二叉树中序和后序遍历序列，构造二叉树，C++实现：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">node *<span class="title">buildBitree</span><span class="params">(<span class="built_in">string</span> post, <span class="built_in">string</span> in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = post.length();</span><br><span class="line"><span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">node *root = <span class="keyword">new</span> node(post[len - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> n = in.<span class="built_in">find</span>(post[len - <span class="number">1</span>]);</span><br><span class="line">root-&gt;lchild = buildBitree(post.substr(<span class="number">0</span>, n), in.substr(<span class="number">0</span>, n));</span><br><span class="line">root-&gt;rchild = buildBitree(post.substr(n, len - n - <span class="number">1</span>), in.substr(n + <span class="number">1</span>, len - n - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Notes:</strong> </p><p>&emsp;&emsp;str.length()、str.size()均用来求取字符串的长度。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校航拍</title>
      <link href="/2020/03/21/Cumt-aerial/"/>
      <url>/2020/03/21/Cumt-aerial/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>声明：视频资源来自网络，因为喜欢，所以上传到博客，如有侵权，请联系删除！</strong></p><script src='//player.polyv.net/script/polyvplayer.min.js'></script><div id='plv_8bb758cd63a75137b984b867c33dce10_8'></div><script>var player = polyvObject('#plv_8bb758cd63a75137b984b867c33dce10_8').videoPlayer({    'width':'900',  'height':'506',    'vid' : '8bb758cd63a75137b984b867c33dce10_8' , 'forceH5':true });</script>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金城兰州</title>
      <link href="/2020/03/20/Jincheng-lanzhou/"/>
      <url>/2020/03/20/Jincheng-lanzhou/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>声明：视频资源来自网络，因为喜欢，所以上传到博客，如有侵权，请联系删除！</strong></p><script src='//player.polyv.net/script/polyvplayer.min.js'></script><div id='plv_8bb758cd63e385239d8290fedb7e5dd7_8'></div><script>var player = polyvObject('#plv_8bb758cd63e385239d8290fedb7e5dd7_8').videoPlayer({    'width':'900',  'height':'506',    'vid' : '8bb758cd63e385239d8290fedb7e5dd7_8' , 'forceH5':true });</script>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影音视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++十进制与二进制的互相转换</title>
      <link href="/2020/02/10/C++_decimal-and-binary-conversion/"/>
      <url>/2020/02/10/C++_decimal-and-binary-conversion/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>手动实现进制转换</p><p>十进制转换为二进制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decTobin</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,w=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">h = n % <span class="number">2</span>;</span><br><span class="line">sum += h * w;</span><br><span class="line">w *= <span class="number">10</span>;</span><br><span class="line">n = n / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>二进制转换为十进制：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binTodec</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h,w=<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n)</span><br><span class="line">&#123;</span><br><span class="line">h = n % <span class="number">10</span>;</span><br><span class="line">sum += h * w;</span><br><span class="line">w *= <span class="number">2</span>;</span><br><span class="line">n = n / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++动态数组</title>
      <link href="/2020/01/10/C-or-C++_dynamic-array/"/>
      <url>/2020/01/10/C-or-C++_dynamic-array/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>近来刷题，遇到好几道题目需要动态数组解决，现在整理一下。C++中动态开辟一维、二维数组很常见，也很实用。</p><ol><li><h5 id="动态开辟一维数组"><a href="#动态开辟一维数组" class="headerlink" title="动态开辟一维数组"></a>动态开辟一维数组</h5><p>动态开辟一维数组简单，代码实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DynamicCreate1Array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;len;</span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] p;         <span class="comment">//动态数组使用完一定要释放</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li><h5 id="动态开辟二维数组"><a href="#动态开辟二维数组" class="headerlink" title="动态开辟二维数组"></a>动态开辟二维数组</h5><ul><li><p>已知二维数组列数，未知行数。假设建立一个n行4列的动态数组（列已知）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DynamicCreate2Array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span>(*p)[<span class="number">4</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] p;         <span class="comment">//动态数组使用完一定要释放</span></span><br></pre></td></tr></table></figure></li><li><p>二维数组行数、列数均未知</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DynamicCreate2Array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row, column;</span><br><span class="line"><span class="keyword">char</span> **p = <span class="keyword">new</span> <span class="keyword">char</span>*[row];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = <span class="keyword">new</span> <span class="keyword">char</span>[column];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态数组释放</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br></pre></td></tr></table></figure><p>例：机器人走迷宫</p><p>迷宫由N W S E组成，踩到N向上走一格，踩到W向左走一格，踩到S向下走一格，踩到E向右走一格。</p><p>输入迷宫行数、列数、机器人开始的初试列数（不大于10，列数从1开始数），判断能否走出迷宫。能走出输出步数，不能走出输出”NO”，多组输入，遇 0 0 0 结束输入。</p><p>例：</p><p>输入：</p><p>4 5 6</p><p>NNNNSN</p><p>NNNSWN</p><p>NNSWNN</p><p>NSWNNN</p><p>3 6 2</p><p>NSNNNN</p><p>NSWNNN</p><p>NENNNN</p><p>0 0 0</p><p>输出：</p><p>7</p><p>No</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*----机器人走迷宫----*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> row, column, <span class="built_in">begin</span>, <span class="built_in">step</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; row &gt;&gt; column &gt;&gt; <span class="built_in">begin</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (row == <span class="number">0</span> &amp;&amp; column == <span class="number">0</span> &amp;&amp; <span class="built_in">begin</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> **p = <span class="keyword">new</span> <span class="keyword">char</span>*[row];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = <span class="keyword">new</span> <span class="keyword">char</span>[column];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="built_in">begin</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; row &amp;&amp; i &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (j &lt; column &amp;&amp; j &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p[i][j] == <span class="string">'N'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p[i][j] == <span class="string">'S'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p[i][j] == <span class="string">'W'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line">j--;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p[i][j] == <span class="string">'E'</span>)</span><br><span class="line">&#123;</span><br><span class="line">p[i][j] = <span class="string">'0'</span>;</span><br><span class="line">j++;</span><br><span class="line"><span class="built_in">step</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">step</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">step</span> == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">step</span> != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">step</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[]p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">```</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 动态数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python函数存储在模块中的函数调用</title>
      <link href="/2019/10/04/Python-function-call-and-module/"/>
      <url>/2019/10/04/Python-function-call-and-module/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>python中常见将函数存储在被称为模块的独立文件中，再将模块导入到主程序中，import语句实现当前运行的程序文件中导入模块中的代码。</p><p>要让函数是可导入的，得先创建模块。模块是扩展名为.py的文件，包含要导入到程序中的代码。</p><a id="more"></a><h2 id="1-导入整个模块"><a href="#1-导入整个模块" class="headerlink" title="1.导入整个模块"></a>1.导入整个模块</h2><p>语法规则：</p><p>module_name.function_name()</p><h2 id="2-导入特定的函数"><a href="#2-导入特定的函数" class="headerlink" title="2.导入特定的函数"></a>2.导入特定的函数</h2><p>语法规则：</p><p>from module_name import function_name</p><p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：</p><p>from module_name import function_0, function_1, function_2</p><h2 id="3-使用as给函数指定别名"><a href="#3-使用as给函数指定别名" class="headerlink" title="3.使用as给函数指定别名"></a>3.使用as给函数指定别名</h2><p>语法规则：</p><p>from module_name import function_name as fn</p><h2 id="4-使用as给模块指定别名"><a href="#4-使用as给模块指定别名" class="headerlink" title="4.使用as给模块指定别名"></a>4.使用as给模块指定别名</h2><p>语法规则：</p><p>import module_name as mn</p><h2 id="5-导入模块中的所有函数"><a href="#5-导入模块中的所有函数" class="headerlink" title="5.导入模块中的所有函数"></a>5.导入模块中的所有函数</h2><p>语法规则：</p><p>from module_name import * </p><p>（不建议使用此方法）</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 函数调用 </tag>
            
            <tag> 模块 </tag>
            
            <tag> import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux socket通信编程</title>
      <link href="/2019/07/01/Linux-socket-communication-programming/"/>
      <url>/2019/07/01/Linux-socket-communication-programming/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>示例：用C语言，基于linux提供的socket函数，编写一个实现“从客户端输入十个字符串，在服务器端完成字符数和单词数统计，并按首位字母排序”的远程计算的网络服务程序。 </p><a id="more"></a><h3 id="1、UDP编程说明"><a href="#1、UDP编程说明" class="headerlink" title="1、UDP编程说明"></a>1、UDP编程说明</h3><p>UDP协议的服务器端流程：</p><p>(1)建立套接字文件描述符，使用函数socket()，生成套接字文件描述符。</p><p>(2)设置服务器地址和侦听端口，初始化要绑定的网络地址结构。</p><p>(3)绑定侦听端口，使用bind()函数，将套接字文件描述符和一个地址类型变量进行绑定。</p><p>(4)接收客户端的数据，使用recvfrom()函数接收客户端的网络数据。</p><p>(5)向客户端发送数据，使用sendto()函数向服务器主机发送数据。</p><p>(6)关闭套接字，使用close()函数释放资源。UDP协议的客户端流程</p><p>UDP协议的客户端流程：</p><p>(1)建立套接字文件描述符，socket()；</p><p>(2)设置服务器地址和端口，struct sockaddr；</p><p>(3)向服务器发送数据，sendto()；</p><p>(4)接收服务器的数据，recvfrom()；</p><p>(5)关闭套接字，close()。</p><p><img src="/loading.gif" data-original="https://i.loli.net/2019/12/31/kU7i4GObXKWndrw.png" alt="UDP编程流程"></p><h3 id="2、相关函数"><a href="#2、相关函数" class="headerlink" title="2、相关函数"></a>2、相关函数</h3><p>(1)  int socket(AF_INET, SOCK_DGRAM, 0);</p><p>创建udp socket，返回套接字描述符，UDP协议建立套接字的方式同TCP方式一样，使用socket()函数，只不过协议的类型使用SOCK_DGRAM，而不是SOCK_STREAM。</p><p>(2) int sendto(int sockfd, const void <em>data, int data_len, unsigned int flags, struct sockaddr </em>remaddr,sock_lenremaddr_len)</p><p>功能：基于UDP发送数据报，返回实际发送的数据长度，出错时返回－1</p><p>参数说明：</p><p>sockfd:套接字描述符</p><p>data:指向要发送数据的指针</p><p>data_len:数据长度</p><p>flags:通常为0</p><p>remaddr:远端地址：IP地址和端口号</p><p>remaddr_len:地址长度</p><p>(3) int recvfrom(int sockfd, void <em>buf,int buf_len,unsigned int flags,struct sockaddr </em>from,sock_len *fromlen);</p><p>功能：从UDP接收数据，返回实际接收的字节数，失败时返回－1</p><p>参数说明：</p><p>Sockfd:套接字描述符</p><p>buf:指向内存块的指针</p><p>buf_len:内存块大小，以字节为单位</p><p>flags:一般为0</p><p>from:远端的地址，IP地址和端口号</p><p>fromlen:远端地址长度</p><h3 id="3、程序编写"><a href="#3、程序编写" class="headerlink" title="3、程序编写"></a>3、程序编写</h3><p>(1) 用C语言编写客户端程序，创建一个socket通信，从客户端输入十个字符串。</p><p>(2) 编译客户端程序生成可执行文件</p><p>输入命令：gcc client1.c -o client1</p><p>​              ./client1</p><p><img src="/loading.gif" data-original="https://i.loli.net/2019/12/31/nDbKUhktrEle2AM.png" alt="编译客户端程序"></p><p>(3) 用C语言编写服务器端程序，绑定客户端通信，接收从客户端输入的十个字符串，显示在屏幕上，并统计输入的字符串中总的单词数和字符数，并按首位字母的ASCII码值从高到低进行排列，输出显示到屏幕。</p><p>(4) 编译服务器端程序生成可执行文件</p><p>输入命令：gcc server1.c -o server1</p><p>​              ./server1</p><p><img src="/loading.gif" data-original="https://i.loli.net/2019/12/31/P57M3ksLFhqHdyK.png" alt="编译服务器端程序"></p><h3 id="4、程序运行效果"><a href="#4、程序运行效果" class="headerlink" title="4、程序运行效果"></a>4、程序运行效果</h3><p>(1) 客户端输入十个字符串。</p><p>注：输入10个字符串时每行代表1个字符串，10字符串10行，由于字符串的输入是由 fgets() 函数实现的，所以获取字符串的时候会将空格符和换行符也进行保存，这点在后面进行总字符数的统计时也体现了出来，获取的字符串由结构体sendbuf[10]进行存储。</p><p><img src="/loading.gif" data-original="https://i.loli.net/2019/12/31/HqKkpUYsr7o6OVA.png" alt="客户端运行效果"></p><p>(2) 服务器端接收数据，显示在屏幕上，并统计输入的字符串中总的单词数和字符数，并按首位字母的ASCII码值从高到低进行排列，输出显示到屏幕。</p><p>注：统计总单词数相当于统计总空格数，空格数+1即为总单词数，字符数的统计结果包括了每个字符串的空格和换行符，每个字符串都有一个换行符，如图9，可以看到得到的总字符数85中包含了所有的空格符和换行符。利用冒泡排序，直接比较输入的10个字符串的首字母，实现字符串按首字母ASCII码值从大到小排列。</p><p><img src="/loading.gif" data-original="https://i.loli.net/2019/12/31/ezErBTlbW7FoQSx.png" alt="服务器端运行效果"></p><h3 id="5、字符串排序说明"><a href="#5、字符串排序说明" class="headerlink" title="5、字符串排序说明"></a>5、字符串排序说明</h3><p>(1) 实现将10个字符串按首字母的ASCII码值从高到低进行排列并依次输出显示在屏幕上。</p><p>功能实现：输入的10个字符串设置结构体sendbuf[10]保存，再服务器端设置结构体recvbuf[10]接收数据，利用冒泡排序，先将每个字符串的首字母取出来，将其值赋给服务端接收缓冲区结构体的recvbuf[i].init成员（专门用于存储字符串的首字母），再直接比较recvbuf[i].init成员值的ASCII码值大小，实现从高到底排列并输出到屏幕上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="keyword">int</span> k = n;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="keyword">int</span> m = n + <span class="number">1</span>; m &lt; <span class="number">10</span>; m++)</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="keyword">if</span> (recvbuf[k].init &lt; recvbuf[m].init)</span><br><span class="line">​                k = m;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">if</span> (k != n)</span><br><span class="line">​        &#123;</span><br><span class="line">​            temp = recvbuf[n];</span><br><span class="line">​            recvbuf[n] = recvbuf[k];</span><br><span class="line">​            recvbuf[k] = temp;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"字符串按首字母ASCII码值从大到小排列为：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="built_in">printf</span>(<span class="string">"%s"</span>, recvbuf[n].string_client);</span><br><span class="line">​    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、完整客户端、服务器端程序代码"><a href="#6、完整客户端、服务器端程序代码" class="headerlink" title="6、完整客户端、服务器端程序代码"></a>6、完整客户端、服务器端程序代码</h3><p>客户端程序源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> MYPORT 8886</span></span><br><span class="line"><span class="keyword">char</span>* SERVERIP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> ERR_EXIT(m) \</span></span><br><span class="line">​    <span class="keyword">do</span> \</span><br><span class="line">&#123; \</span><br><span class="line">​    perror(m); \</span><br><span class="line">​    <span class="built_in">exit</span>(EXIT_FAILURE); \</span><br><span class="line">​    &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo_cli</span><span class="params">(<span class="keyword">int</span> sock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">​    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">​    servaddr.sin_family = AF_INET;</span><br><span class="line">​    servaddr.sin_port = htons(MYPORT);</span><br><span class="line">​    servaddr.sin_addr.s_addr = inet_addr(SERVERIP);</span><br><span class="line">​    <span class="keyword">int</span> ret;</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">client</span></span></span><br><span class="line"><span class="class">​    &#123;</span></span><br><span class="line">​        <span class="keyword">char</span> string_client[<span class="number">100</span>];</span><br><span class="line">​    &#125;sendbuf[<span class="number">10</span>];</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">server</span></span></span><br><span class="line"><span class="class">​    &#123;</span></span><br><span class="line">​        <span class="keyword">char</span> string_client[<span class="number">100</span>];</span><br><span class="line">​    &#125;recvbuf[<span class="number">10</span>];</span><br><span class="line">​    <span class="comment">//struct client temp;</span></span><br><span class="line">​    <span class="comment">//struct server temp;</span></span><br><span class="line">​    <span class="keyword">int</span> i;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"请输入10字符串：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        fgets(sendbuf[i].string_client,<span class="number">100</span>,<span class="built_in">stdin</span>);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"向服务器发送：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="built_in">printf</span>(<span class="string">"%s"</span>, sendbuf[i].string_client);</span><br><span class="line">​        sendto(sock, sendbuf[i].string_client, <span class="built_in">strlen</span>(sendbuf[i].string_client), <span class="number">0</span>, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">​        <span class="built_in">memset</span>(sendbuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(sendbuf[i].string_client));</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">close</span>(sock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">int</span> sock;</span><br><span class="line">​    <span class="keyword">if</span> ((sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">​        ERR_EXIT(<span class="string">"socket"</span>);</span><br><span class="line">​    echo_cli(sock);</span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器端程序源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> MYPORT 8886</span></span><br><span class="line">\<span class="meta">#<span class="meta-keyword">define</span> ERR_EXIT(m) \</span></span><br><span class="line">​    <span class="keyword">do</span> &#123; \</span><br><span class="line">​    perror(m); \</span><br><span class="line">​    <span class="built_in">exit</span>(EXIT_FAILURE); \</span><br><span class="line">​    &#125; <span class="keyword">while</span> (<span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">echo_ser</span><span class="params">(<span class="keyword">int</span> sock)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="comment">//char recvbuf[1024] = &#123;0&#125;;</span></span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">server</span></span></span><br><span class="line"><span class="class">​    &#123;</span></span><br><span class="line">​        <span class="keyword">char</span> string_client[<span class="number">100</span>];</span><br><span class="line">​        <span class="keyword">char</span> init;</span><br><span class="line">​    &#125;recvbuf[<span class="number">10</span>];</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">server</span> <span class="title">temp</span>;</span></span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">peeraddr</span>;</span></span><br><span class="line">​    <span class="keyword">socklen_t</span> peerlen;</span><br><span class="line">​    <span class="keyword">int</span> n;</span><br><span class="line">​    <span class="keyword">int</span> i, nword=<span class="number">0</span>, nchar=<span class="number">0</span>;</span><br><span class="line">​    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">​    &#123;       </span><br><span class="line">​        peerlen = <span class="keyword">sizeof</span>(peeraddr);</span><br><span class="line">​        <span class="built_in">memset</span>(recvbuf[i].string_client, <span class="number">0</span>, <span class="keyword">sizeof</span>(recvbuf[i].string_client));</span><br><span class="line">​        n = recvfrom(sock, recvbuf[i].string_client, <span class="keyword">sizeof</span>(recvbuf[i].string_client), <span class="number">0</span>,</span><br><span class="line">​                     (struct sockaddr *)&amp;peeraddr, &amp;peerlen);</span><br><span class="line">​        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)</span><br><span class="line">​        &#123;            </span><br><span class="line">​            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">​                <span class="keyword">continue</span>;          </span><br><span class="line">​            ERR_EXIT(<span class="string">"recvfrom error"</span>);</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="built_in">printf</span>(<span class="string">"接收到的数据：%s"</span>,recvbuf[i].string_client);</span><br><span class="line">​            <span class="comment">//printf("%s",recvbuf[i].string_client);</span></span><br><span class="line">​            <span class="comment">//sendto(sock, recvbuf, n, 0,</span></span><br><span class="line">​            <span class="comment">//       (struct sockaddr *)&amp;peeraddr, peerlen);</span></span><br><span class="line">​            <span class="comment">//printf("回送的数据：%s\n",recvbuf[i].string_client);</span></span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="keyword">int</span> numWhiteSpace = <span class="number">0</span>;</span><br><span class="line">​    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">​        <span class="built_in">strcpy</span>(str, recvbuf[n].string_client);</span><br><span class="line">​        <span class="comment">//printf("字符串：%s\n", str);</span></span><br><span class="line">​        recvbuf[n].init = str[<span class="number">0</span>];</span><br><span class="line">​        <span class="keyword">while</span> (<span class="string">'\0'</span> != str[j])</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="keyword">if</span> (<span class="string">' '</span> == str[j])&#123;</span><br><span class="line">​                ++numWhiteSpace;   <span class="comment">//空格数</span></span><br><span class="line">​            &#125;</span><br><span class="line">​            ++j; <span class="comment">//字符数</span></span><br><span class="line">​        &#125;</span><br><span class="line">​        nchar = j + nchar;</span><br><span class="line">​        nword = numWhiteSpace + <span class="number">1</span>+nword;</span><br><span class="line">​        j = <span class="number">0</span>;</span><br><span class="line">​        numWhiteSpace = <span class="number">0</span>;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"输入字符串的总单词数：%d\n"</span>, nword);</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"输入字符串的总字符数（包括空格、换行符）：%d\n"</span>, nchar); </span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="keyword">int</span> k = n;</span><br><span class="line">​        <span class="keyword">for</span> (<span class="keyword">int</span> m = n + <span class="number">1</span>; m &lt; <span class="number">10</span>; m++)</span><br><span class="line">​        &#123;</span><br><span class="line">​            <span class="keyword">if</span> (recvbuf[k].init &lt; recvbuf[m].init)</span><br><span class="line">​                k = m;</span><br><span class="line">​        &#125;</span><br><span class="line">​        <span class="keyword">if</span> (k != n)</span><br><span class="line">​        &#123;</span><br><span class="line">​            temp = recvbuf[n];</span><br><span class="line">​            recvbuf[n] = recvbuf[k];</span><br><span class="line">​            recvbuf[k] = temp;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"字符串按首字母ASCII码值从大到小排列为：\n"</span>);</span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++)</span><br><span class="line">​    &#123;</span><br><span class="line">​        <span class="built_in">printf</span>(<span class="string">"%s"</span>, recvbuf[n].string_client);</span><br><span class="line">​    &#125;</span><br><span class="line">​    <span class="built_in">close</span>(sock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">​    <span class="keyword">int</span> sock;</span><br><span class="line">​    <span class="keyword">if</span> ((sock = socket(PF_INET, SOCK_DGRAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">​        ERR_EXIT(<span class="string">"socket error"</span>);</span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">​    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">​    servaddr.sin_family = AF_INET;</span><br><span class="line">​    servaddr.sin_port = htons(MYPORT);</span><br><span class="line">​    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);  </span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"监听%d端口\n"</span>,MYPORT);</span><br><span class="line">​    <span class="keyword">if</span> (bind(sock, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr)) &lt; <span class="number">0</span>)</span><br><span class="line">​        ERR_EXIT(<span class="string">"bind error"</span>);   </span><br><span class="line">​    echo_ser(sock);  </span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> socket通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器基础知识与配置</title>
      <link href="/2019/06/10/Server-basics-and-configuration/"/>
      <url>/2019/06/10/Server-basics-and-configuration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1、什么是守护进程？守护进程的类型和作用有哪些？</p><p>Linux 服务器在启动时需要启动很多系统服务，它们向本地和网络用户提供了Linux的系统功能接口，直接面向应用程序和用户。提供这些服务的程序是由运行在后台的守护进程来执行的。守护进程是生存期长的一种进程。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。他们常常在系统引导装入时启动，在系统关闭时终止。linux系统有很多守护进程，大多数服务器都是用守护进程实现的。同时，守护进程完成许多系统任务，比如，作业规划进程crond、打印进程lqd等。</p><a id="more"></a><p>根据守护进程的启动和管理方式，可以分为独立启动守护进程和超级守护进程两类：</p><p>独立启动（stand_alone):该类进程启动后就常驻内存，所以会一直占用系统资源。其最大的优点就是它会一直启动，当外界有要求时相应速度较快，像httpd等进程。</p><p>超级守护进程：系统启动时由一个统一的守护进程xinet来负责管理一些进程，当相应请求到来时需要通过xinet的转接才可以唤醒被xinet管理的进 程。这种进程的优点时最初只有xinet这一守护进程占有系统资源，其他的内部服务并不一直占有系统资源，只有数据包到来时才会被xinet管理员来唤醒。并且我们还可以通过xinet来对它所管理的进程设置一些访问权限，相当于多了一层管理机制。</p><p>2.linux的init进程是怎样的进程？细说init和linux上的各服务进程之间的关系？</p><p>init是Linux系统操作中不可缺少的程序之一。所谓的init进程，它是一个由内核启动的用户级进程。内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。</p><p>所以,init始终是第一个进程（其进程编号始终为1）。内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p><p>init进程由0进程创建，完成系统的初始化，是系统中所有其他用户进程的祖先进程。</p><p>3.Apache服务器的配置文件httpd.conf中有很多内容，请解释如下配置项：</p><p>（1）MaxKeepAliveRequests 200 </p><p>允许每次连接的最大请求数目，此为200。</p><p>（2）UserDir public_html</p><p>设定用户放置网页的目录。</p><p>（3）DefaultType text/plain </p><p>设置服务器对于不认识的文件类型的预设格式。</p><p>（4）AddLanguare en.en</p><p>设置可传送语言的文件给浏览器。</p><p>（5）DocumentRoot“/usr/local/httpd/htdocs”</p><p>该目录为Apache放置网页的地方。</p><p>（6）AddType application/x-httpd-php.php.php.php4</p><p>服务器选择使用php4。</p><p>（7）port 1080 </p><p>将apache服务器的端口号设定为1080。</p><p>（8）UserDir userdoc</p><p>设定用户网页目录为userdoc。</p><p>（9）DocumentRoot “/home/htdocs”</p><p>设定apache服务器的网页根目录:/home/htdocs。</p><p>（10）Options Indexes FollowSymLinks   AllowOverride None </p><p>Order deny,allow     deny from all     allow from 192.168.1.5</p><p>在此apache服务器上设定一个目录/home/htdocs/inside，且此目录只允许IP地址为192.168.1.5的主机访问。</p><p>（11）Server Type Standlone</p><p>定义apache服务器以独立进程的方式运行。</p><p>4.什么是Apache的虚拟主机？其作用是什么？Apache虚拟主机实现方法有哪些？</p><p>Apache是开源的web服务软件之一，也是现在开源系统比如centos上安装web服务常见软件；虚拟主机是提供网站服务的集成环境，比如：linux Apache+php+mysq、LAMP。就是常说的建站开通的虚拟空间，所以Apache服务器只是虚拟空间的一种架构。在一个Apache服务器上可以配置多个虚拟主机，实现一个服务器提供多站点服务，其实就是访问同一个服务器上的不同目录。</p><p>Apache虚拟主机的配置方式主要有三种，即基于IP、基于port、以及基于域名。</p><p>5.简述使用ftp进行文件传输时的两种登录方式？它们的区别是什么？常用的ftp文件传输命令有哪些？</p><p>ftp有两种登录方式：匿名登录和授权登录。使用匿名登录时，用户名为：anonymous，密码为：任何合法email地址；使用授权登录时，用户名为用户在远程系统中的用户帐号，密码为用户在远程系统中的用户密码。</p><p>区别：使用匿名登录只能访问ftp目录下的资源，默认配置下只能下载；而授权登录访问的权限大于匿名登录，且上载、下载均可。</p><p>ftp文件传输有两种文件传输模式：ASCII模式和二进制数据模式。ASCII模式用来传输文本文件，其他文件的传输使用binary模式。</p><p>常用的ftp文件传输命令为：bin、asc、put、get、mput、mget、prompt、bye。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 编程实例</title>
      <link href="/2019/06/03/Linux-programming-examples/"/>
      <url>/2019/06/03/Linux-programming-examples/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>示例：用C语言编写一个从键盘输入10名学生的姓名、性别、学号和家庭住址，然后按照学号排序，并将排序后的结果在屏幕上按对齐的方式打印输出的程序。</p><a id="more"></a><p>C语言排序程序源码 (学号按从高到低排序)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输入10名学生的姓名，性别，学号，家庭住址；</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> sex[<span class="number">4</span>];  </span><br><span class="line"></span><br><span class="line">​    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> address[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">&#125;info[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">temp</span>;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">int</span> i,j, k;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"请输入10个学生的信息:姓名、性别、学号、家庭住址\n"</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="comment">//printf("请输入第%d位学生的信息:姓名、性别、学号、家庭住址\n", i + 1);</span></span><br><span class="line"></span><br><span class="line">​       <span class="built_in">scanf</span>(<span class="string">"%s%s%d%s"</span>, info[i].name, &amp;info[i].sex, &amp;info[i].id, &amp;info[i].address);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       k = i;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line"></span><br><span class="line">​       &#123;</span><br><span class="line"></span><br><span class="line">​              <span class="keyword">if</span> (info[k].id &lt; info[j].id)</span><br><span class="line"></span><br><span class="line">​                     k = j;</span><br><span class="line"></span><br><span class="line">​       &#125;</span><br><span class="line"></span><br><span class="line">​       <span class="keyword">if</span> (k != i)</span><br><span class="line"></span><br><span class="line">​       &#123;</span><br><span class="line"></span><br><span class="line">​              temp = info[i];</span><br><span class="line"></span><br><span class="line">​              info[i] = info[k];</span><br><span class="line"></span><br><span class="line">​              info[k] = temp;</span><br><span class="line"></span><br><span class="line">​       &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">printf</span>(<span class="string">"10个学生的信息按序号由高到低排序为\n"</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​       <span class="built_in">printf</span>(<span class="string">"%s\t%s\t%d\t%s\n"</span>, info[i].name, info[i].sex, info[i].id, info[i].address);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象语言的缺点和问题</title>
      <link href="/2019/01/01/Disadvantages-and-problems-of-object-oriented-languages/"/>
      <url>/2019/01/01/Disadvantages-and-problems-of-object-oriented-languages/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>面向对象编程是一种计算机编程架构。面向对象编程的一条基本原则是计算机程序是由单个能够起到子程序作用的单元或对象组合而成。面向对象编程达到了软件工程的三个主要目标：重用性、灵活性和扩展性。为了实现整体运算，每个对象都能够接收信息、处理数据和向其它对象发送信息。</p><a id="more"></a><p>刚开始学习C++ 时，我们首先了解到的就是面向对象语言的四个基本特征：抽象、继承、封装、多态、以及一大堆面向对象语言的优点包括代码重用，权限控制，易扩展，开发效率高之类的。毫无疑问面向对象编程的出现使人们的编程与实际的世界更加接近，所有的对象被赋予属性和方法，结果编程就更加富有人性化，但同时面向对象语言从诞生之日起就一直伴随着许多的缺陷。 </p><h3 id="1、运行速度慢"><a href="#1、运行速度慢" class="headerlink" title="1、运行速度慢"></a>1、运行速度慢</h3><p>就 C++ 而言，由于面向更高的逻辑抽象层，使得 C++ 在实现的时候，不得不做出性能上面的牺牲，有时候甚至是致命的 ( 所有对象的属性都经过内置多重指针的间接引用是其性能损失的主要原因之一)。<br>在计算机速度飞速发展的今天，你可能会说，一丁点的性能牺牲没什么大不了。是的，从面向对象的角度，使的编程的结构更加清晰完整，数据更加独立和易于管理，性能的牺牲可以带来这么多的好处，没有理由不做稳赚的生意吧？<br>不过，在某些对速度要求极高特殊场合，例如你做的是电信的交换系统，每秒钟有超过百万的人同时进行电话交换，如果，每一个数据交换过程都是一个对象，那么总的性能损失将是天文数字！！<br>或者这个例子不够贴身，再举个例子吧。假如你受聘于一个游戏设计公司，老板希望做出来的游戏可以更多的兼顾到更多的电脑使用者，游戏每秒钟的运行的帧可以 更多，子弹和爆炸物可以更多、更华丽。那么，你会发现使用 C++ 会使你的程序变得笨拙，无法满足你的需求。</p><h3 id="2、继承的代价庞大，增加了代码量"><a href="#2、继承的代价庞大，增加了代码量" class="headerlink" title="2、继承的代价庞大，增加了代码量"></a>2、继承的代价庞大，增加了代码量</h3><p>对于面向过程语言来说，编程时需要哪些变量和方法就只编写这些变量和方法，而对于面向对象语言来说，每次无论你要使用什么都要先写一个类，并且每一个类都要有独立的变量和方法，这样就会造成可能很简单的问题也要很多的类代码，为了解决这个缺点，继承便出现了，继承可以让类与类可以共享代码，获得代码的可重用性，一定程度上降低了代码量。但是，随着继承层次的增加，代码的复杂性会加速增长，随之而来的bug也会越来越难以发现。</p><h3 id="3、对象与对象之间相互依赖，耦合性太高"><a href="#3、对象与对象之间相互依赖，耦合性太高" class="headerlink" title="3、对象与对象之间相互依赖，耦合性太高"></a>3、对象与对象之间相互依赖，耦合性太高</h3><p>由于面向对象语言中一切都是对象，我们必须使用一个对象去创建另外一个对象，才能使用其内部方法，这样就造成了这些对象之间相互依赖，为了消除这些依赖，我们可以把创建对象的代码全部集中到一个对象之中，其他的对象都通过调用该对象的方法来动态的获取所需要的对象，这也就是我们所说的工厂模式。进一步地，我们可以不使用工厂，而是编写一个插件，该插件可以把我们所需要的对象在运行时动态地“塞”给我们，这就是依赖注入，也就是控制反转。这个插件就相当于Spring IOC。</p><h3 id="4、失去了灵活性"><a href="#4、失去了灵活性" class="headerlink" title="4、失去了灵活性"></a>4、失去了灵活性</h3><p>面向对象语言代码都很死板，继承也没有运行时动态，但是java的多态机制，其不同于面向过程语言的方法后期绑定，在运行时才能确定具体调用的是哪个方法一定程度上增加了其灵活性。面向对象语言一直提倡的组合大于继承的思想诞生了许许多多的设计模式，这些设计模式通过对组合和多态的奇妙运用大大的增加了面向对象语言的灵活性。</p><h3 id="5、需要一定的软件支持环境"><a href="#5、需要一定的软件支持环境" class="headerlink" title="5、需要一定的软件支持环境"></a>5、需要一定的软件支持环境</h3><p>面向对象方法学把分析、设计和实现很自然地联系在一起了。虽然面向对象设计原则上不依赖于特定的实现环境，但是实现结果和实现成本却在很大程度上取决于实现环境。因此，直接支持面向对象设计范式的面向对象程序语言、开发环境及类库，对于面向对象实现来说是非常重要的。<br>综上所述，其实在我们的学习过程中可以看到面向对象语言有许多优秀的地方，但也有一些缺陷，而我们一直都在努力地想尽各种办法去弥补这些缺陷，通过一些机制让面向对象语言越来越来趋于完善。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔/杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 程序设计语言原理 </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坑</title>
      <link href="/2017/02/01/Begin-Hexo/"/>
      <url>/2017/02/01/Begin-Hexo/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6f243a2e385d84d5ccc11900fcb31266158822ebce9a6a801ddb57f32c6608e4">d0d703fa332139beb12ceb85f23df7fc2dd2ad6c1e2d88c79a07ca82a4c752383c4b274b70abf24c2627b91511ca38c6827a85fb24bb1d405ef366f63d449475cc7e7021b2f42aea7973805ef690a099be12a8caa2ffdf6dbc9f6212144592fad5a584f16d9cbcc534663cce7d13c5205693b5799467cdca4f31b1eb3da117c4464e9d65e8d2ea086423bfac557b55b88f807ccf0b25016324b2051db850900f99f12708a26a6549e44778d76c46ce31d1a6d64c5e9d8db63da0630457acc014c67941c9a3f8ca646afc155801e88b3509b175e7ac010b442778b88935322dc16758351f90281084ecfd1b06f21cb5a1c4e1255c460c67ea328840963b1ad7b1f852cafe5fdc6953ede3c0673d806bfabe27886bcda6e231bc5cd1f5cb677b296f51da1bb1989bfaa6cf0b0660f35891bbd99b26a0896e78d57842dee264d016baceb99e3f13092237c93684670c6e88cfff33da6d7349a6cf40be699e8284ef10b4eb241453682469c77ad2f090a4e373b2180742907a573045ec4249741ead90025684de14d2c211fe00e6607198734334ea439dae591f201d9490b798cbfd6d3587ac9b9ad81396def3061e6a23e6c7f9ccdbb7275a2809aef139d0a9c9778d50c2180804a2063d7974f0290a762bdb2f9ab0a607f00dc611f48b6c45ad7a18fb4b0531aafa273afa651a226af26f05b880027af884671dec90c608d7654df07ed93288cb5ef405b58fd5836a91aeba11d07a72696ca368791b14474e45a25ee9c4d515f02b78b4bff644290ac0cffe4cf1ef6c1dd1e44107ebabe897fe81d6288a1a427bae0728eead5416c712ebadf1518b2d30149d7e0dc4b75fecb6994f618f69f0c2c45338af3e35f7cf2e3acbba3222363f11403d04e2fbd73ea3ed57170c8a5d1038d5d9c2b314a05e4b2793aa3cec2ed7e22ef6ea5bcef5b4121fc3b2383c08c835fa47d03ba9715ccbe2eb07d83a91eca74a3ef651e17c1f55e1</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/02/01/hello-world/"/>
      <url>/2017/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
